- pttt = data.getOne("static/features/chinas-communist-party-under-xi-jinping/data/path-to-the-top")
- _toH = (r, i) => (_.pluck(r.slice(0,i),"height").reduce(((m,e)=>m+e),0)*18+16*i)

for person in pttt.people
  .slide.bg-lt.flex-stretch
    .flex-cv.page-0(
      id="profile-" + written.hyphenCase(person.name)
      data-view="in-viewport, page" 
      data-pages=person.roles.length
    )
      .posa.txt-tu.txt-bold.txt-sans.txt-xs.fade-in.delay-4
        svg(width="954" height="720")
          g
            for province, i in pttt.provinces
              use.fill-ff(
                href="#" + province.id
                stroke="#ebebed"
              )
          g
            for province, i in pttt.provinces
              text.fill-dka(
                x=province.x
                y=province.y + 4
                text-anchor="middle"
              )
                = province.name

          g(opacity=0.2)
            - list = _.pluck(person.roles, "where").filter(_.identity).reverse()
            if list.length <= 7
              for n in new Array(7 - list.length)
                g.build
            for where, i in list
              - p = _.find(pttt.provinces, {name: where})
              if p
                g.build
                  if pv = _.find(pttt.provinces, {name: list[i + 1]})
                    line(x1=pv.x x2=p.x y1=pv.y y2=p.y stroke="#22273d" stroke-width=4 stroke-linecap="round")
                  circle.fill-dk(
                    cx=p.x cy=p.y r=12 + (list.length - 1 - i) * 4
                  )

          g
            - p = _.find(pttt.provinces, {name: _.pluck(person.roles, "where")[0]})
            circle.fill-dk.marker(
              r=12 cx=p.x cy=p.y
              data-attributes=JSON.stringify(
                person.roles.map((r,i) => ((p = _.find(pttt.provinces, {name: r.where})) ? {cx: p.x, cy: p.y, r: i*4 + 8} : {r: 0}))
              )
            )

          rect.item-0(
            width="100%"
            height="100%"
            fill="url(#gradient)"
          )

      .slide-inner(style="transform:translateZ(0)")
        .posa
          .clearfix
            .type.txt-md.txt-ff.fl-l(
              data-view="slide, in-viewport"
              data-duration=1000
            )
              span.line.txt-mono.bg-dk= person.name
            .type.txt-md.txt-ff.fl-l(
              data-view="slide, in-viewport"
              data-duration=700
              data-delay=100
            )
              span.line.txt-mono.bg-hl.txt-sc= person.nameCN

          .profile-img
            img.item-0(
              width=300
              data-src=(
                "./img/path-" + written.hyphenCase(person.name) + ".png"
              ))

      .slide-sub.bg-dk.ph-.txt-center(
        style="transform:translateZ(0)"
      )
        .txt-md.ph-md
          .posr.fade-in.delay-3.fw(style="z-index: 1")
            for role, i in person.roles
              .posa.txt-mono.fw(class="item-"+i)
                .txt-hl= role.years
                .txt-ff.path-role(
                  class=role.title.length >= 40 ? "txt-sm" : ""
                )
                  != role.title

        .posa.bg-hl.path-roles(
          data-attributes=JSON.stringify(
            person.roles.map((r,i) => ({
              style: "transform:translateY(-" + _toH(person.roles, i) + "px)"
            }))
          )
        )
          .path-roles-mask(
            data-attributes=JSON.stringify(
              person.roles.map((r,i) => ({
                style: "transform: translateY(" + _toH(person.roles, i) + "px)"
              }))
            )
          )
            if person.roles.length <= 7
              for n in new Array(7 - person.roles.length)
                .build
            for role, i in _.clone(person.roles).reverse().slice(1)
              .txt-sans.txt-ff.txt-tu.txt-bold.ph-sm.pv-xs.build
                != typogr.typogrify(role.title)
