block append config
  -
    colors = data.getOne("static/charts/templates/colors/data").colors
    chart = data.getOne("static/features/indonesia-poll-2021/charts/q11/data").charts[0]
    toPercent = (n) => (n * 100).toFixed(2) + "%"

#chart-11.chart-wrapper.flex.flex-col
  .col-wrap.txt-left.flex-grow.flex
    .col-md.flex-grow.flex.flex-col
      .chart-title= chart.title
      .chart-subtitle.p-sm!= chart.subtitle
      hr

      .chart.flex-grow: .chart-content

        - scale = chart.scale
        - minY = scale.minY
        - maxY = scale.maxY
        - range = maxY - minY
        - baseline = (scale.datum + maxY) / range

        //- I've split fy (y position of the rect) and fh (height of the rect) into two equations. Positive and negative values need to be treated differently, hence the ternary statement in fy()
        - fh = (y) => Math.abs(y) / range
        - fy = (y) => y < 0 ? baseline : (baseline - fh(y))
        - fx = (i) => (i + 0.6) / (chart.axes[1].values.length + 0.6)

        svg(height="100%" width="100%")
          svg(height="100%")
            //- This must have been an older template as the number of steps on the y-axis was hard-coded in multiple places. I've replaced those hard-coded values with a new variable "scale.steps", which I've defined in data.yaml
            for n, i in new Array(scale.steps)
              - y = 1 - (i / (scale.steps - 1))
              svg(y=toPercent(y))
                text(text-anchor="end" transform="translate(-8 4)")
                  = scale.minY + (i / (scale.steps - 1)) * (scale.maxY - scale.minY) + "%"

          //- minor lines added manually
          line(x1="0" x2="100%" y1="33%"  y2="33%" stroke="#ddd")
          line(x1="0" x2="100%" y1="66%"  y2="66%" stroke="#ddd")
          line(x1="0" x2="100%" y1="0%"  y2="0%" stroke="#ddd")      
          g
            for y, i in chart.axes[1].values
              - label = chart.axes[0].values[i]
              svg(
                x=toPercent(fx(i))
                y=toPercent(fy(y))
                width=toPercent(fx(0))
                height=toPercent(fh(y))
              )

                rect(
                  fill=label.highlight ? "#ff4050" : "#2D6993"
                  width="100%"
                  height="100%"
                  data-value=y
                  data-response=label.text
                  data-category=""
                  data-tooltip="11"
                )
            
                text.chart-value(
                  x="50%"
                  y="50%"
                  text-anchor="middle"
                  transform="translate(0 4.5)" 
                  style="color: white"
                )
                  = y

                svg(x="50%" y="100%")
                  text.label(
                    text-anchor="middle"
                  )= label.text

              //- Add a new baseline
              line(x1="0" x2="100%" y1=toPercent(baseline) y2=toPercent(baseline) stroke="#ccc")

  script.
    window.addEventListener("initCharts", () => {
      tooltip.phrases["11"] = {
        phrase: "{{value}}% {{variant}} future economic development.",
        variant: (response) =>
          response === "Our own model"
            ? "said Indonesia should develop its own model for"
          : response === "Can’t choose"
            ? "couldn't choose a country to model for Indonesia’s"
            : "said {{response}} should be a model for Indonesia’s"
      }
    })
  
  style
    include:sass ./style.sass