block append config
  -
    colors = data.getOne("static/charts/templates/colors/data").colors
    chart = data.getOne("static/features/indonesia-poll-2021/charts/q5/data")
    toPercent = (n) => (n * 100).toFixed(2) + "%"
    isEmpty = (y) => (y === undefined || y == null || y.length <= 0)
    isNull = (val) => (val === undefined || val == null || val <= 0)
  
#chart-5.chart-wrapper
  .txt-left.flex.flex-grow.flex-col
    .chart-title= chart.title
    .chart-subtitle.p-sm!= chart.subtitle
    hr
    .chart.flex-grow: .chart-content
      - ln = chart.series[0].values.length
      - axes = chart.axes
      - minY = axes.minY
      - maxY = axes.maxY
      - range = maxY - minY
      - fx = (i) => (i + 0.4) / (ln - 0.2)
      - fy = (y) => (y - minY) / range
      
      
      svg(height="100%" width="100%")
      
        // Y-Axis labels
        svg(height="100%")
          - let steps = chart.axes.stepsY-1
          for n, i in new Array(steps+1)
            - y = 1 - (i / (steps))
            svg(y=toPercent(y))
              text(text-anchor="end" transform="translate(-8 4)")
                = minY + range*(i/steps) + (axes.percentage ? "%" : "")
          svg(y="50%")
            text.y-label Total: trust 'a great deal' and 'somewhat'
              
        // Y-Axis minor lines
        if chart.axes.minorLines
          svg(height="100%")
            for n, i in new Array(steps)
              - y = (i / steps)
              svg
                line.gridlines(
                  x1="0%"
                  y1=toPercent(y)
                  x2="100%"
                  y2=toPercent(y)
                  stroke="#5552"
                  stroke-dasharray=(chart.axes.dotted.includes(steps-i) ? 5 : "")
                )

        // X-Axis labels
        for x, i in chart.series[0].values
          if [2006,2011,2021].includes(x)
            svg.x-label(x=toPercent(fx(i)) y="100%")
              text(
                text-anchor=axes.rotateX ? "end" : "middle"
                transform=axes.rotateX ? "rotate(-45) translate(-8, 14)" : "translate(0 20)"
              )=x
            
        // OPTIONAL GUIDE LINE
        if !isEmpty(axes.guideLine)
          - var y = 100*fy(maxY + minY - axes.guideLine)+"%"
          line(
            x1="0" y1=y x2="100%" y2=y
            stroke="#333"
            stroke-width=.25
            stroke-dasharray=(false ? 1 : "")
          )

        // CHART LINES
        svg(
          height="100%"
          width="100%"
          viewBox="0 0 100 100"
          preserveAspectRatio="none"
        )
          // SERIES LINES
          for item, i in chart.series
            if i
              polyline(
                fill="none"
                stroke=colors[chart.series[i].color]
                stroke-dasharray=(item.dashed ? 10 : "" | item.dotted ? 1+",6" : "")
                stroke-width=(item.widen ? 6 : 3)
                stroke-linejoin=(item.dashed ? "round": "" | item.dotted ? "round" : "")
                stroke-linecap=(item.dashed ? "round": "" | item.dotted ? "round" : "")
                points=(item.values.map( (y, ix) => {
                  return isEmpty(y) ? "" : [
                    (100 * fx(ix)).toFixed(3),
                    (100 * fy(maxY + minY - y)).toFixed(3)
                  ].join(" ");
                })).filter( e => e ).join(",")
              )          

        for item, i in chart.series
          g
            
            for val, ix in item.values

              if !isNull(val)
                circle(
                  r=4
                  cx=toPercent(fx(ix))
                  cy=toPercent(fy(maxY + minY - val))
                  fill=colors[chart.series[i].color]
                  stroke='#fff'
                  stroke-width=0
                )
              svg.chart-value(
                x=toPercent(fx(ix))
                y=toPercent(fy(maxY + minY - val))
                style=`color: ${colors[chart.series[i].color]}`
              )
                //- x=( (i != 1) && !(i==3 && [11,12].includes(ix)) ? 16 : 0)
                //- y=( (i != 1) && !(i==3 && [11,12].includes(ix)) ? -12 : 24)
                //- x=( (ix== 0) ? -12 : 28 | (i!= 1) && (ix== 1) ? -4 : 28 )
                //- y=( (ix== 0) ? 12 : 2 | (i!= 1) && (ix== 1) ? -12 : 2 )
                text(
                  x=( (i != 1) && !(i==3 && [11,12].includes(ix)) ? 16 : 0)
                  y=( (i != 1) && !(i==3 && [11,12].includes(ix)) ? -12 : 24)
                  text-anchor="end"
                  fill=colors[chart.series[i].color]
                )
                  = val ? val.toFixed(0) : "" 
                  //-change above line  to val.toFixed(1) to show decimal place

                //-text= chart.series[i].title
                //-adds country name with each circle
    
    .row
      ul.legend.list-bare.txt-left.flex.flex-ch.flex-wrap
        - l = chart.series.length
        for ax, i in new Array(l)
          if i
            li.legend-item
              span.legend-item-box(style=`background: ${colors[chart.series[l-i].color]}`)
              span.legend-item-label= chart.series[l-i].title

  
  style
    include:sass ./style.sass