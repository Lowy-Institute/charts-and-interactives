block append config
  -
    colors = data.getOne("static/charts/templates/colors/data").colors
    chart = data.getOne("static/features/indonesia-poll-2021/charts/q4/data")
    toPercent = (n) => (n * 100).toFixed(2) + "%"
  
#chart-4.chart-wrapper
  .txt-left.flex.flex-grow.flex-col
    .chart-title= chart.title
    .chart-subtitle.p-sm!= chart.subtitle
    hr
    .chart.flex-grow: .chart-content
      - ln = chart.series[0].values.length
      - axes = chart.axes
      - minY = axes.minY
      - maxY = axes.maxY
      - range = maxY - minY
      - fx = (i) => (i + 0.6) / (ln + 0.75)
      - fy = (y) => (y - minY) / range
      
      svg(height="100%" width="100%")
      
        // Y-Axis labels
        svg(height="100%")
          - let steps = chart.axes.stepsY-1
          for n, i in new Array(steps+1)
            - y = 1 - (i / (steps))
            svg(y=toPercent(y))
              text(text-anchor="end" transform="translate(-8 4)")
                = minY + range*(i/steps) + (axes.percentage ? "%" : "")
              
        // Y-Axis minor lines
        if chart.axes.minorLines
          svg(height="100%")
            for n, i in new Array(steps)
              - y = (i / steps)
              svg
                line(
                  x1="0%"
                  y1=toPercent(y)
                  x2="100%"
                  y2=toPercent(y)
                  stroke="#5552"
                  stroke-dasharray=(chart.axes.dotted.includes(steps-i) ? 5 : "")
                )

        // Chart rects
        g.bars
          - const n = chart.series[0].values.length
          for undef, i in new Array(n)
            svg(
              x=toPercent(fx(i))
              width=toPercent(fx(0))
              height="100%"
            )   
              - y = 1
              - vals = chart.series.filter( (s, i) => i ).map( s => s.values[i] )
              - vals = axes.reverse ? vals.reverse() : vals

              for v, j in vals
                - ci = axes.reverse ? vals.length-j : j+1
                if v > 0
                  rect(
                    y=toPercent(y-fy(v))
                    height=toPercent(fy(v))
                    width="100%"
                    fill=colors[chart.series[ci].color]
                    data-value=v
                    data-category=chart.series[0].values[i]
                    data-response=chart.series[j+1].title
                    data-tooltip=4
                    
                  )
                  text.chart-value(
                    x="50%"
                    y=toPercent(y - fy(v/2))
                    text-anchor="middle"
                    transform="translate(0 4.5)"
                    style=`color: ${(j < 3 ? "white" : "")}`
                  )
                    //-= v.toFixed(0) + (axes.percentage ? "%" : "")
                    //- removed % symbol from hover
                    = v.toFixed(0) + (axes.percentage ? "" : "")

                - y -= fy(v)
                  
              // X-Axis labels
              svg.x-label(x="50%" y="100%")
                text(
                  text-anchor=axes.rotateX ? "end" : "middle"
                  transform=axes.rotateX ? "rotate(-45) translate(-8, 14)" : "translate(0 20)"
                )
                  =chart.series[0].values[i]
    
    .row
      ul.legend.list-bare.txt-left.flex.flex-ch
        for ax, i in new Array(chart.series.length)
          if i
            li.legend-item
              span.legend-item-box(style=`background: ${colors[chart.series[i].color]}`)
              span.legend-item-label= chart.series[i].title

  style
    include:sass ./style.sass

  script.
    window.addEventListener("initCharts", () => {
      tooltip.phrases["4"] = {
        phrase: "In {{category}}, {{value}}% said they felt {{response}}.",
        variant: (response) => {}
      }
    })
