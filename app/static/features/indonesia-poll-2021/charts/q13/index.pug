block append config
  -
    colors = data.getOne("static/charts/templates/colors/data").colors
    chart = data.getOne("static/features/indonesia-poll-2021/charts/q13/data")
    toPercent = (n) => (n * 100).toFixed(2) + "%"
    isEmpty = (y) => (y === undefined || y == null || y.length <= 0)
  
#chart-13.chart-wrapper
  .txt-left.flex.flex-grow.flex-col
    .chart-title= chart.title
    .chart-subtitle.p-sm!= chart.subtitle
    hr
    .chart.flex-grow: .chart-content
      - ln = chart.series[0].values.length
      - axes = chart.axes
      - minY = axes.minY
      - maxY = axes.maxY
      - range = maxY - minY
      - fx = (i) => (i + 0.6) / (ln + 0.25)
      - fy = (y) => (y - minY) / range
      
      svg(height="100%" width="100%" viewBox="-1 -1 2 2" style="transform: rotate(-90deg)")

        // Y-Axis labels
        svg(height="100%")
          - let steps = chart.axes.stepsY-1
          for n, i in new Array(steps+1)
            - y = 1 - (i / (steps))
            svg(y=toPercent(y))
              text(text-anchor="end" transform="translate(-8 4)")
                = (minY + range*(i/steps) + (axes.percentage ? "%" : ""))
              
        // Y-Axis minor lines
        if chart.axes.minorLines
          svg(height="100%")
            for n, i in new Array(steps)
              - y = (i / steps)
              svg
                line(
                  x1="0%"
                  y1=toPercent(y)
                  x2="100%"
                  y2=toPercent(y)
                  stroke="#5552"
                  stroke-dasharray=(chart.axes.dotted.includes(steps-i) ? 5 : "")
                )

        // X-Axis labels
        for x, i in chart.series[0].values
          svg.x-label(x=toPercent(fx(i)) y="100%")
            text(
              text-anchor=axes.rotateX ? "end" : "middle"
              transform=axes.rotateX ? "rotate(-45) translate(-8, 24)" : "translate(0 20)"
            )=x
            
        // OPTIONAL GUIDE LINE
        if !isEmpty(axes.guideLine)
          - var y = 100*fy(maxY + minY - axes.guideLine)+"%"
          line(
            x1="0" y1=y x2="100" y2=y
            stroke="#333"
            stroke-width=.25
            stroke-dasharray=(false ? 1 : "")
          )
    .row
      ul.legend.list-bare.txt-left.flex.flex-ch.flex-wrap
        for ax, i in new Array(chart.series.length)
          if i
            li.legend-item
              span.legend-item-box(style=`background: ${colors[chart.series[i].color]}`)
              span.legend-item-label= chart.series[i].title

    .hidden 
      .hover-label-1
        span 31%
      .hover-label-2
        span 26%
      .hover-label-3
        span 17%
      .hover-label-4
        span 26%

  style
    include:sass ./style.sass
  
  script.

    const svgEl = document.querySelector('#chart-13 svg');
    const slices = [
      { percent: 0.31, color: '#2D6993' },
      { percent: 0.26, color: '#B7C1CE' },
      { percent: 0.17, color: '#ff8800' },
      { percent: 0.26, color: '#5E646C' },
    ];
    let cumulativePercent = 0;
    
    function getCoordinatesForPercent(percent) {
      const x = Math.cos(2 * Math.PI * percent);
      const y = Math.sin(2 * Math.PI * percent);
      return [x, y];
    }
    
    slices.forEach(slice => {
      // destructuring assignment sets the two variables at once
      const [startX, startY] = getCoordinatesForPercent(cumulativePercent);
      
      // each slice starts where the last slice ended, so keep a cumulative percent
      cumulativePercent += slice.percent;
      
      const [endX, endY] = getCoordinatesForPercent(cumulativePercent);
    
      // if the slice is more than 50%, take the large arc (the long way around)
      const largeArcFlag = slice.percent > .5 ? 1 : 0;
    
      // create an array and join it just for code readability
      const pathData = [
        `M ${startX} ${startY}`, // Move
        `A 1 1 0 ${largeArcFlag} 1 ${endX} ${endY}`, // Arc
        `L 0 0`, // Line
      ].join(' ');
    
      // create a <path> and append it to the <svg> element
      const pathEl = document.createElementNS('http://www.w3.org/2000/svg', 'path');
      pathEl.setAttribute('d', pathData);
      pathEl.setAttribute('fill', slice.color);
      svgEl.appendChild(pathEl);
    });