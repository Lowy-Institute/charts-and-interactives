svg.line-chart.fade-in.delay-1(
  width="100%"
  height="100%"    
  xmlns="http://www.w3.org/2000/svg"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  data-name=cat
  data-duration=4000
  data-view="line, in-viewport"    
)

  - wprev = 0
  
  for l, i in labels
    
    - split = l.split("<br>")
    - lens  = split.map( i => i.length )
    - len   = Math.max( ...lens )
    
    - h = lens.length == 1 ? 12 : 18
    - y = lens.length == 1 ? 5 : -2
    - w = len > 12 ? len * 8.5 : len > 11 ? len * 8 : len > 9 ? len * 8.75 : len > 7 ? len * 10 : len > 4 ? len * 11 : 44
    - d = `M-8,-${h} l${w},0 l8,${h} l-8,${h} l-${w},0Z`
    
    g.pathset(
      data-view="path"
      data-category=cat
      data-specifier=i
      )
    
      svg.avg-lines(
        width="100%"
        height="100%"
        viewBox="0 0 100 100" 
        preserveAspectRatio="none"
      )
        
        polyline.line(
          class=colors[i]
          stroke-width=4
          points=(
            values
              .map( (s,j,a) => [ j/(a.length - 1)*100, 100-s[i] ]
                .map( e => e.toFixed(2) )
                .join(",")
              )
              .join(" ")
          )
        )

      svg.dogtag-mobile(
        x=wprev
        y=-32
      )
        - wprev += w * 1.25 + 1
        - h *= 1.25
        - w *= 1.25
        
        if split.length == 1
        
          rect(
            x=0 y=-h
            width=w height=2*h
            class=`fill-${colors[i]}`
          )
          text(x=w/2 y=y text-anchor="middle")
            = split
            
        else if split.length == 2
        
          rect(
            x=(w-wprev+10) y=(-2*h - 9)
            width=1.8*w height=30
            class=`fill-${colors[i]}`
          )
          text(x=(w-wprev+26) y=(-h-12) text-anchor="start")
            = split.join(" ")
      
      svg.dogtag(
        y=(100-values[0][i]) + "%"
        x=-(1.05 * w / 1.25) + 7
        preserveAspectRatio="xMinYMin"
      )
        path(
          d=d
          class=`fill-${colors[i]}`
          )
        text(x=0 y=y text-anchor="start")
          = split[0]
          
          if split.length == 2
            tspan(x=0 dy=12)
              = split[1]

  svg.click-instruction(x="0" y="0" height="22" width="22" viewBox="0 0 24 24")
    circle(cx="9.85" cy="1" r="10")
    path(d="M18.536 7.555c-1.188-.252-4.606-.904-5.536-1.088v-3.512c0-1.629-1.346-2.955-3-2.955s-3 1.326-3 2.955v7.457c-.554-.336-1.188-.621-1.838-.715-1.822-.262-3.162.94-3.162 2.498 0 .805.363 1.613 1.022 2.271 3.972 3.972 5.688 5.125 6.059 9.534h9.919v-1.748c0-5.154 3-6.031 3-10.029 0-2.448-1.061-4.157-3.464-4.668zm.357 8.022c-.821 1.483-1.838 3.319-1.891 6.423h-6.13c-.726-3.82-3.81-6.318-6.436-8.949-.688-.686-.393-1.37.442-1.373 1.263-.006 3.06 1.884 4.122 3.205v-11.928c0-.517.458-.955 1-.955s1 .438 1 .955v6.948c0 .315.256.571.572.571.314 0 .57-.256.57-.571v-.575c0-.534.49-.938 1.014-.833.398.079.686.428.686.833v1.273c0 .315.256.571.571.571s.571-.256.571-.571v-.83c0-.531.487-.932 1.008-.828.396.078.682.424.682.828v1.533c0 .315.256.571.571.571s.571-.256.571-.571v-.912c0-.523.545-.867 1.018-.646.645.305 1.166.932 1.166 2.477 0 1.355-.465 2.193-1.107 3.354z")
    text(x="30" y="20") A LABEL TO REVEAL COUNTRIES

  svg.rankings.fade-in.delay-21( y="96%" x="100%" )
    
    - grouped = labels.map( (l,i) => ({ label: l, mean: averages[i] }) )
    - sorted  = grouped.sort( (a,b) => a.mean - b.mean ) // ascending order which gets flipped in offset
    
    text.label(class=("offset-" + labels.length)) Average scores
  
    for item, i in sorted
      text.rank(
        class=("offset-" + i)
      )
        = item.label.replace(/Middle East<br>and/g, "M. East & ").replace(/Democracy/g, "Democratic")
        
        tspan( dx="8" )= item.mean.toFixed(1)
