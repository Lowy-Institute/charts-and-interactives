- toPercent = (n) => (n * 100).toFixed(2) + "%"
- toPoint = (p,i,n) => p ? [ +(i/(n-1)*100).toFixed(1), +(100-p).toFixed(1) ].join(",") : ""
- toPath  = a => a.map( (s,i) => !s ? "" : (!i || !a[i-1]) ? `M${toPoint(s,i,a.length)}` : `L${toPoint(s,i,a.length)}` ).filter( e => e != "" ).join(" ")

- countries = data.getOne("static/features/covid-performance/data/countries")
- list = _.filter(countries, c => c.rankMar || c.rankJan)
- list = _.sortBy(list, 'rankMar')
- n = list.length

.slide-wrap
  
  - cat = "rankings"
  include _context

  .type-wrap(data-view="in-viewport")
    
    form(action="")
      small.note Rankings as of
      #date-selector
        input#march(type="radio" name="date" value="march" checked)
        label(for="march" onclick="changeDate('mar')") 13 March 2021
        input#january(type="radio" name="date" value="january")
        label(for="january" onclick="changeDate('jan')") 9 January 2021
    
    .table-wrapper.flex
      .flex-col
        .table-head: table
          thead
            tr
              th.txt-left(onclick="sortTable.call(this, \"rank\")") Rank
                span.icon.icon-down-sm.show
              th.txt-left(
                onclick="sortTable.call(this, \"name\")"
              ) 
                | Country
                span.hide-touchscreen /Territory
                span.icon.icon-down-sm
              th.txt-center(
                ) Average
                
        .country-list: table
          tbody
            each c, i in list
              tr(
                data-name=c.shortname || c.name
                data-rankjan=c.rankJan
                data-rankmar=c.rankMar
                data-avgjan=c.averageJan
                data-avgmar=c.averageMar
                class=(c.rankMar ? "" : "hidden")
              )
                td.rank.txt-right= c.rankMar
                td.flex.items-center
                  img(
                    width="45px"
                    alt=`Country flag of ${c.name}`
                    src=`../../img/country-flags/png-100px/${c.code.toLowerCase()}.png`
                    loading="lazy"
                    )
                  .name!= (c.name === "Sweden" ? '* ' : '') + ( c.shortname || c.name )
                td.avg.txt-right= c.averageMar ? c.averageMar.toFixed(1) : "N/A"
                //- Removed sparkline  
                //- td.sparkline
                  svg(
                    viewBox="0 0 100 100" preserveAspectRatio="none"
                    xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                  )
                    path( d=toPath(c.percentiles) )  
    
    .footnote
      p#january-edition.hidden
        | <b>Please note</b><br>
      
        | 1. China was not included in this ranking due to a lack of data on daily number of tests performed in the country for the entirety of the examined period. Data for Taiwan is provided separately to that of China.<br>

        | 2. Sweden’s composite score is based on the country’s management of the pandemic during the latter half of the examined period only. Due to incomplete data, Sweden’s ranking does not account for the country’s experience with the pandemic during the country’s first wave of COVID-19 infections.<br>

        | 3. Please see the Methodology section for further details on exclusions and inclusions.<br>

      p#march-edition
        | <b>Please note</b><br>
      
        | 1. China was not included in this ranking due to a lack of data on daily number of tests performed in the country for the entirety of the examined period. Data for Taiwan is provided separately to that of China.<br>

        | 2. Countries with incomplete data for more than a third of the examined period are no longer included in this ranking. Please see the Methodology section for further details on exclusions and inclusions.<br>

  script.
    var ready = false;
    
    function flipSortIcon(el) {
      let icon = el.querySelector('.icon');
      icon.classList.toggle('rot', !asc);

      if ( !icon.classList.contains('show') ) {
        el.parentNode.querySelector('th > .show').classList.remove('show');
        icon.classList.toggle('show');
      }
    }
    
    const NAN = -999
    var list 
    var asc  = true
    var sort = "rank"
    var date = "mar"
    var tbody = document.querySelector('.country-list table tbody') 
    var rankHeaderEl = document.querySelector('.tableHead th')

    const newList = () => Array.from(tbody.children).map(row => ({
      name: row.dataset.name.toLowerCase(),
      html: row.outerHTML,
      rankjan: +row.dataset.rankjan || NAN,
      rankmar: +row.dataset.rankmar || NAN,
      avgjan:  +row.dataset.averagejan || NAN,
      avgmar:  +row.dataset.averagemar || NAN
    }))
    
    function sortTable(key) {
      
      let togglingDate = this === window
      let col = key
      
      if (sort === key && !togglingDate) asc = !asc
      if (key === 'rank') key += date
        
      list.map((l,i) => i < 10 ? console.log(l[key]) : "" )

      list = list.sort((a, b) => 
        (a[key] < b[key] ? 1 : -1) * (asc ? -1 : 1)
      )
      
      tbody.innerHTML = list.map(row => row.html).join("")
      
      if (!togglingDate) {
        sort = col
        flipSortIcon(this)
      }
    }
    
    function changeDate(month) {
      date = month
      Array.from(tbody.children).forEach(row => {
        if (!row.dataset[`rank${date}`]) {
          row.classList.add('hidden')
        } else { 
          row.classList.remove('hidden') 
        }

        row.querySelector('.avg').innerHTML  = row.dataset[`avg${date}`]
        row.querySelector('.rank').innerHTML = row.dataset[`rank${date}`]
      })
      list = newList()
      sortTable(sort)
      toggleNotes()
    }
    
    function toggleNotes() {
      document.querySelector('#march-edition').classList.toggle('hidden')
      document.querySelector('#january-edition').classList.toggle('hidden')
    }
    
    window.addEventListener('load', function () {
      ready = true
      list = newList()
    })
    
