extend /partials/layout

block append config
  - var datapath = "static/charts/geopolitics-pacific/fig-1/data"
  - var colorpath = "static/charts/templates/colors/data"
  - _.extend(page, data.getOne(datapath))
  - _.extend(page, data.getOne(colorpath))
  - toPercent = (n) => (n * 100).toFixed(2) + "%"
  - isEmpty = (y) => (y === undefined || y == null || y.length <= 0)
  - chart = page
block page
  .wrapper.flex
    .txt-center.flex.flex-grow.flex-col
      .chart-title= chart.title
      .chart-subtitle.txt-muted.txt-tu.p-sm!= chart.subtitle
      .chart.flex-grow: .chart-content
        - ln = chart.axes.x.values.length
        - axes = chart.axes
        - minY = axes.minY
        - maxY = axes.maxY
        - range = maxY - minY
        - rangeY = maxY - minY 
        - minX = axes.minX
        - maxX = axes.maxX
        - rangeX = maxX - minX
        - stepsX = axes.stepsX
        - fx = (i) => (i + 0) / (ln - 1)
        - fy = (y) => (1 - (y - minY) / range)
        
        svg(height="100%" width="100%")
          svg(y="50%")
           text(text-anchor="middle" y="-60" transform="rotate(-90)") Billions
        
          // Y-Axis labels
          svg(height="100%")
            - let steps = chart.axes.stepsY-1
            for n, i in new Array(steps+1)
              - y = 1 - (i / (steps))
              svg(y=toPercent(y))
                text(text-anchor="end" transform="translate(-8 4)")
                  = "$" + (minY + range*(i/steps)/1000000000) + (axes.percentage ? "%" : "") + " B"
                
          // Y-Axis minor lines
          if chart.axes.minorLines
            svg(height="100%")
              for n, i in new Array(steps)
                - y = (i / steps)
                svg
                  line(
                    x1="0%"
                    y1=toPercent(y)
                    x2="100%"
                    y2=toPercent(y)
                    stroke="#5552"
                    stroke-dasharray=(chart.axes.dotted.includes(steps-i) ? 5 : "")
                  )

          // X-Axis labels
          for x, i in chart.axes.x.values
            svg.x-label(x=toPercent(fx(i)) y="100%")
              text.line1(
                text-anchor=axes.rotateX ? "end" : "middle"
                transform=axes.rotateX ? "rotate(-45) translate(-8, 14)" : "translate(0 20)"
              )= x
              
          // OPTIONAL GUIDE LINE
          if !isEmpty(axes.guideLine)
            - var y = 100*fy(maxY + minY - axes.guideLine)+"%"
            line(
              x1="0" y1=y x2="100" y2=y
              stroke="#333"
              stroke-width=.25
              stroke-dasharray=(false ? 1 : "")
            )

          // DATA
          svg(
            height="100%"
            width="100%"
            viewBox="0 0 100 100"
            preserveAspectRatio="none"
          )
            // SERIES LINES
            for series, i in chart.series
              path(
                fill=chart.colors[chart.series[i].color]
                d="M" + (series.values.map((y, j) => (
                  [
                    100 * fx(j),
                    100 * fy( _.sum(chart.series.slice(i).map(s => s.values[j])) )
                  ].join(",")
                )
                ).concat(["100,100", "0,100"])
                ).join(" L") + "Z"
              )
      
          for item, i in chart.series
            g
              for val, ix in item.values
                svg.chart-value(
                  x=toPercent(fx(ix))
                  y=toPercent(fy( _.sum(chart.series.slice(i).map(s => s.values[ix]))))
                  style=`color: ${i === 0 ? 'white' : 'black'}`
                )
                  text(
                    dy=(i % 1 == 0 ? 24 : 24)
                    text-anchor=(ix === 0 ? "start" : ix === item.values.length - 1 ? "end" : "middle")
                    fill=chart.colors[chart.series[i].color]
                  )
                    = (val/1000000000).toFixed(2)
      
      .row
        ul.legend.list-bare.txt-left.flex.flex-ch
          for ax, i in new Array(chart.series.length)
            li.legend-item
              span.legend-item-box(style=`background: ${chart.colors[chart.series[i].color]}`)
              span.legend-item-label= chart.series[i].title

      .chart-source.txt-left.txt-muted.txt-cond!= chart.source
      .chart-notes.txt-left.txt-muted.txt-cond!= chart.notes
      
      .tooltip

  script.


    /* --- USER TO UPDATE --- */
    const enableTooltips = false;
    const nLegendItems = 4;
    const nSeries = 6;
    /* --------------------- */
    
    const chart = document.querySelectorAll('.chart-content');
    const rects = document.querySelectorAll('rect');
    const vals = document.querySelectorAll('.chart-value');
    const series = document.querySelectorAll('.x-label');
    const tooltip = document.querySelector('.tooltip');
    const legendItems = document.querySelectorAll('.legend-item-label');
    
    if (enableTooltips) {
      window.addEventListener('DOMContentLoaded', () => {
        rects.forEach( (rect, i) => addHoverEventListeners(rect, i) );  
      });
    }
        
    function addHoverEventListeners(el, i) {
      el.addEventListener('mouseover', () => {
        
        let val = vals[i].innerHTML;
        let ser = series[ Math.floor(i/nLegendItems) ].innerHTML;
        let cat = legendItems[i % nLegendItems].innerHTML;
        let box = el.getBoundingClientRect();
        
        tooltip.innerHTML = val + " of " + ser + " countries were " + cat + " performing";
        tooltip.style.left = box.left + box.width/2 - tooltip.offsetWidth/2 + 'px';
        tooltip.style.top = box.top - tooltip.offsetHeight + 'px';
        tooltip.style.opacity = 1;
        
      });
      
      el.addEventListener('mouseleave', () => { 
        tooltip.style.opacity = 0;
      });
      
    }
    
  
block append css
  style
    :sass
    
      .wrapper
        height: 550px

      .chart
        box-sizing: border-box
        position: relative

      .chart-content
        position: absolute
        top: 20px
        left: 50px
        right: 20px
        bottom: 40px
        padding: 0 24px

      .chart-content > svg
        border-bottom: 1px solid #bbb

      .chart-title
        margin: auto
        font-size: 20px
        
      .chart-subtitle
        font-weight: 700
        height: 10px
        margin-top: -10px
        font-size: 15px
        
      .tooltip
        position: absolute
        left: 0
        background: #fffe
        padding: .75em
        opacity: 0
        border-radius: .2em
        box-shadow: 0 0 5px 0 #0004
        transition-duration: 0.5s
        pointer-events: none
        font-size: 14px
        text-transform: lowercase
        max-width: 180px
        box-sizing: border-box

      
      li
        list-style: none
        margin: 0
        padding: 4px 16px 4px 24px

      .legend
        font-size: 15px
        margin-bottom: .75em

      .legend-item
        margin: 4px 8px 0
        padding-right: 0
        position: relative
        white-space: nowrap

      .legend-item-box
        position: absolute
        left: 0
        top: .5em
        height: 1em
        width: 1em
        background: black

      polyline
        vector-effect: non-scaling-stroke

      text
        font-size: 14px
        fill: currentColor

      svg
        overflow: visible
        
      .chart-notes, .chart-source
        margin-top: 1em
        margin-left: 3em
        font-size: 15px
        
      .chart-value
        opacity: 0
        transition-duration: .4s
        pointer-events: none
      
      .chart-content:hover .chart-value
        opacity: 1

      @media (max-width: 700px)
        
        .x-label text.line1
          text-anchor: end
          transform: rotate(-45deg) translate(-8px, 14px)
        .x-label text.line2
          text-anchor: end
          transform: rotate(-45deg) translate(8px, 30px)

        text
          font-size: 13px
        .legend
          margin-top: 2em
          
      @media (max-width: 450px)
        .chart-content
          bottom: 40px
        .legend
          flex-direction: column
        .chart-title
          font-size: 18px
        .chart-subtitle
          font-size: 14px
        .chart-notes,
        .chart-source
          text-align: center
          font-size: 13px
