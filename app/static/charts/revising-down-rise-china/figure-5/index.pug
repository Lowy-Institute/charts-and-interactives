extend /partials/layout

block append config
  - var datapath = "static/charts/revising-down-rise-china/figure-5/data"
  - var colorpath = "static/charts/templates/colors/data"
  - _.extend(page, data.getOne(datapath))
  - _.extend(page, data.getOne(colorpath))
  - toPercent = (n) => (n * 100).toFixed(2) + "%"
  - isEmpty = (y) => (y === undefined || y == null || y.length <= 0)
  - chart = page
  
block page
  .wrapper.flex
    .txt-center.flex.flex-grow.flex-col
      .chart-title!= chart.title
      .chart-subtitle.txt-muted.txt-tu.p-sm!= chart.subtitle
      .chart.flex-grow: .chart-content
        - ln = chart.series[0].values.length
        - axes = chart.axes
        - minY = axes.minY
        - maxY = axes.maxY
        - rangeY = maxY - minY 
        - minX = axes.minX
        - maxX = axes.maxX
        - rangeX = maxX - minX
        - stepsX = axes.stepsX

        //- Simplified mapping functions
        - fx = (i) => (i - minX) / rangeX
        - fy = (y) => (y - minY) / rangeY
        
        svg(height="100%" width="100%")
        
          // Y-Axis labels
          svg(height="100%")
            - let steps = chart.axes.stepsY-1
            for n, i in new Array(steps+1)
              - y = 1 - (i / (steps))
              svg(y=toPercent(y))
                text(text-anchor="end" transform="translate(-8 4)")
                  = minY + rangeY * (i / steps) + (axes.percentage ? "%" : "")
            svg(y="50%")
              text.y-label Produxtivity growh per year (%)
                
          // Y-Axis minor lines
          if chart.axes.minorLines
            svg(height="100%")
              for n, i in new Array(steps)
                - y = (i / steps)
                svg
                  line.gridlines(
                    x1="0%"
                    y1=toPercent(y)
                    x2="100%"
                    y2=toPercent(y)
                    stroke="#5552"
                    stroke-dasharray=(chart.axes.dotted.includes(steps-i) ? 5 : "")
                  )

          // X-Axis labels
          for x, i in new Array(stepsX + 1)
            svg.x-label(x=toPercent(fx(i * rangeX / stepsX)) y="100%")
              //- The issue here was what value was sent to fx()
              //- now uses a regexp to format number with commas
              - value = (minX + rangeX * (i / stepsX)).toFixed(0)
              - formatted = value.replace(/(\d)(?=(\d{3})+$)/g, "$1,")
              text(
                text-anchor=axes.rotateX ? "end" : "middle"
                transform=axes.rotateX ? "rotate(-45) translate(-8, 14)" : "translate(0 20)"
              )= formatted
              
          // OPTIONAL GUIDE LINE
          if !isEmpty(axes.guideLine)
            - var y = 100*fy(maxY + minY - axes.guideLine)+"%"
            line(
              x1="0" y1=y x2="100%" y2=y
              stroke="#333"
              stroke-width=.25
              stroke-dasharray=(false ? 1 : "")
              stroke-linejoin="round"
              stroke-linecap="round"
            )

          //- Too much data to show values in chart. Removed.
          svg(height="100%" width="100%")
            // BUBBLES
            //- draw bubbles first (paint below the series lines)
            //- Note this is now wrapped in it's own svg element.
            //- The svg which wraps the polylines must set a preserveAspectRatio attribute,
            //- as path strings only take absolute coordinates, not percentages.
            //- When plotting circles though, you can work directly with percentages for cx/cy.
            //- Your circles were being drawn as ellipses because the chart line svg is doesn't preserve the aspect ratio and gets warped.
            //- https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/preserveAspectRatio
            for series, s in chart.series
              g
                for v, i in chart.series[5].values
                  - x = toPercent(fx(v[0]))
                  - y = toPercent(1 - fy(v[1]))
                  - r = v[2]*chart.axes.rScaleFactor
                  - color = chart.colors[chart.series[5].color]
                  circle(
                    r=r
                    cx=x
                    cy=y
                    fill=color+"22"
                    stroke=color+"44"
                    stroke-width=1
                    data-x=v[0]
                    data-y=v[1]
                    data-r=v[2]
                  )

          // CHART LINES
          svg(
            height="100%"
            width="100%"
            viewBox="0 0 100 100"
            preserveAspectRatio="none"
          )
            // SERIES LINES
            for item, i in chart.series
              if i
                polyline(
                  fill="none"
                  stroke=chart.colors[chart.series[i].color]
                  stroke-dasharray=(item.dashed ? 10 : "" | item.dotted ? 5 : "")
                  stroke-width=(item.widen ? 6 : 3)
                  stroke-linejoin=(item.dashed ? "": "round" | item.dotted ? "": "round")
                  stroke-linecap=(item.dashed ? "": "round" | item.dotted ? "": "round")
                  points=item.values.map((v) => `${100 * fx(v.x)},${100 * (1 - fy(v.y))}`).join(" ")
                )
                //- Replaced the javascript logic to generate "points" string, as described in email.

          //- test plot circle
          //-g
            circle(r="20" cx="90%" cy="12%" fill="#ccc" stroke="#bbb" stroke-width="1")

      .row
        ul.legend.list-bare.txt-left.flex.flex-ch
          - l = chart.series.length
          for ax, i in new Array(l)
            if i
              li.legend-item
                span.legend-item-box(style=`background: ${chart.colors[chart.series[l-i].color]}`)
                span.legend-item-label= chart.series[l-i].title

      .chart-source.txt-right.txt-muted.txt-cond!= chart.source
      .chart-notes.txt-right.txt-muted.txt-cond!= chart.notes
      
      //- .tooltip

block append css
  style
    :sass
    
      .wrapper
        height: 500px

      .chart
        box-sizing: border-box
        position: relative

      .chart-content
        position: absolute
        top: 20px
        left: 65px
        right: 20px
        bottom: 40px

      .chart-content > svg
        border-bottom: 1px solid #bbb

      .chart-title
        margin: auto
        font-size: 20px
        
      .chart-subtitle
        font-weight: 600
        height: 10px
        margin-top: -10px
        font-size: 15px
        
      .tooltip
        position: absolute
        left: 0
        background: #fffe
        padding: .75em
        opacity: 0
        border-radius: .2em
        box-shadow: 0 0 5px 0 #0004
        transition-duration: 0.5s
        pointer-events: none
        font-size: 14px
        text-transform: lowercase
        max-width: 180px
        box-sizing: border-box
        
      .y-label
        transform: rotate(-90deg) translate(-1.5rem, -3rem)

      li
        list-style: none
        margin: 0
        padding: 4px 16px 4px 24px

      .legend
        font-size: 15px
        margin-bottom: .75em
        flex-direction: row-reverse

      .legend-item
        margin: 4px 8px 0
        padding-right: 0
        position: relative
        white-space: nowrap

      .legend-item-box
        position: absolute
        left: 0
        top: .5em
        height: 1em
        width: 1em
        background: black

      polyline
        vector-effect: non-scaling-stroke

      text
        font-size: 14px
        fill: currentColor

      svg
        overflow: visible
        
      .chart-notes, .chart-source
        margin-left: 2em
        font-size: 15px
        
      .chart-value
        opacity: 0
        transition-duration: .4s
        pointer-events: none
        
      circle
        opacity: .5
        transition-duration: .4s
        
      .gridlines
        transition-duration: .4s
      
      .chart-content:hover .gridlines
        opacity: 0

      .chart-content:hover .chart-value,
      .chart-content:hover circle,
        opacity: .4

      @media (max-width: 700px)
        
        .x-label text
          text-anchor: end
          transform: rotate(-45deg) translate(-8px, 14px)

        text
          font-size: 13px
          
      @media (max-width: 500px)
        .chart-content
          bottom: 40px
        .legend
          flex-direction: column
        .chart-title
          font-size: 18px
        .chart-subtitle
          font-size: 14px
        .chart-notes,
        .chart-source
          text-align: center
          font-size: 13px
          
      @media print
        .wrapper
          margin: 100px auto!important
