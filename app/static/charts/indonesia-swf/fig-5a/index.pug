extend /partials/layout

block append config
  - var datapath = "static/charts/indonesia-swf/fig-5a/data"
  - var colorpath = "static/charts/templates/colors/data"
  - _.extend(page, data.getOne(datapath))
  - _.extend(page, data.getOne(colorpath))
  - toPercent = (n) => (n * 100).toFixed(2) + "%"
  - isEmpty = (y) => (y === undefined || y == null || y.length <= 0)
  - chart = page
  
block page
  .wrapper.flex
    .txt-center.flex.flex-grow.flex-col
      .chart-title= chart.title
      .chart-subtitle.txt-muted.txt-tu.p-sm!= chart.subtitle
      .chart.flex-grow: .chart-content
        - ln = chart.series[0].values.length
        - axes = chart.axes
        - minY = axes.minY
        - maxY = axes.maxY
        - range = maxY - minY
        - fx = (i) => (i + 0.6) / (ln + 0.25)
        - fy = (y) => (y - minY) / range
        
        svg(height="100%" width="100%")
          svg
              rect(y="0%" x="1%" height="100%" width="37%" fill="#e1dede")
              text(y="8%" x="3%") Asian financial
              text(y="13%" x="3%") crisis & recovery
              rect(y="0%" x="36.5%" height="100%" width="38.4%" fill="#f1eeee")
              text(y="8%" x="40%") Yudhoyono
              rect()
              text(y="8%" x="78%") Jokowi

          // pasted in columns from fig-3b
          g.bars
            svg(x="1.24%" width="2.50%" height="100%") 
              rect(y="96.79%" height="3.21%" width="100%")
            svg(x="4.98%" width="2.50%" height="100%")
              rect(y="96.65%" height="3.35%" width="100%")
            svg(x="8.72%" width="2.50%" height="100%")
              rect(y="95.74%" height="4.26%" width="100%")
            svg(x="12.46%" width="2.50%" height="100%")
             rect(y="95.62%" height="4.38%" width="100%")
            svg(x="16.20%" width="2.50%" height="100%") 
             rect(y="93.91%" height="6.09%" width="100%")
            svg(x="19.93%" width="2.50%" height="100%")  
             rect(y="91.38%" height="8.62%" width="100%")
            svg(x="23.67%" width="2.50%" height="100%")
             rect(y="91.89%" height="8.11%" width="100%")
            svg(x="27.41%" width="2.50%" height="100%")
             rect(y="90.63%" height="9.37%" width="100%")
            svg(x="31.4%" width="2.50%" height="100%")
             rect(y="88.36%" height="11.64%" width="100%")
            svg(x="35.2%" width="2.50%" height="100%")
             rect(y="88.27%" height="11.73%" width="100%")
            svg(x="39%" width="2.50%" height="100%")
             rect(y="87.00%" height="13.00%" width="100%")
            svg(x="43%" width="2.50%" height="100%")
             rect(y="85.48%" height="14.52%" width="100%")
            svg(x="46.90%" width="2.50%" height="100%")
             rect(y="82.57%" height="17.43%" width="100%")
            svg(x="50.5%" width="2.50%" height="100%")
             rect(y="80.29%" height="19.71%" width="100%")
            svg(x="54.25%" width="2.50%" height="100%")
             rect(y="77.59%" height="22.41%" width="100%")
            svg(x="58.1%" width="2.50%" height="100%")
             rect(y="74.96%" height="25.04%" width="100%")
            svg(x="62.0%" width="2.50%" height="100%")
             rect(y="70.52%" height="29.48%" width="100%")
            svg(x="65.79%" width="2.50%" height="100%")
             rect(y="64.66%" height="35.34%" width="100%")
            svg(x="69.53%" width="2.50%" height="100%")
             rect(y="57.84%" height="42.16%" width="100%")
            svg(x="73.27%" width="2.50%" height="100%")
             rect(y="54.20%" height="45.80%" width="100%")
            svg(x="77.01%" width="2.50%" height="100%")
             rect(y="42.47%" height="57.53%" width="100%")
            svg(x="80.75%" width="2.50%" height="100%")
             rect(y="35.27%" height="64.73%" width="100%")
            svg(x="84.5%" width="2.50%" height="100%")
             rect(y="27.88%" height="72.12%" width="100%")
            svg(x="88.25%" width="2.50%" height="100%")
             rect(y="18.82%" height="81.18%" width="100%")
            svg(x="92.2%" width="2.50%" height="100%")
             rect(y="12.57%" height="87.43%" width="100%")
            svg(x="96.0%" width="2.50%" height="100%")
             rect(y="7.58%" height="92.42%" width="100%")

          // Y-Axis labels - left
          svg
            svg(y="100%")
              text.y-left(text-anchor="end" transform="translate(4 4)") 0
            svg(y="80%")
              text.y-left(text-anchor="end" transform="translate(4 4)") 2,000
            svg(y="60%")
              text.y-left(text-anchor="end" transform="translate(4 4)") 4,000
            svg(y="40%")
              text.y-left(text-anchor="end" transform="translate(4 4)") 6,000
            svg(y="20%")
              text.y-left(text-anchor="end" transform="translate(4 4)") 8,000
            svg(y="0")
              text.y-left(text-anchor="end" transform="translate(4 4)") 10,000
            svg(y="50%")
              text.y-label Trillion rupiah

          // Y-Axis labels - right
          svg.y-right(height="100%" x="104%")
            - let steps = chart.axes.stepsY-1
            for n, i in new Array(steps+1)
              - y = 1 - (i / (steps))
              svg(y=toPercent(y))
                text(text-anchor="end" transform="translate(-8 4)")
                  = minY + range*(i/steps) + (axes.percentage ? "%" : "")
            svg(y="50%")
              text.y-label2 % of GDP
                
          // Y-Axis minor lines
          if chart.axes.minorLines
            svg(height="100%")
              for n, i in new Array(steps)
                - y = (i / steps)
                svg
                  line(
                    x1="0%"
                    y1=toPercent(y)
                    x2="100%"
                    y2=toPercent(y)
                    stroke="#5552"
                    stroke-dasharray=(chart.axes.dotted.includes(steps-i) ? 5 : "")
                  )

          // X-Axis labels
          for x, i in chart.series[0].values
            svg.x-label(x=toPercent(fx(i)) y="100%")
              text(
                text-anchor=axes.rotateX ? "end" : "middle"
                transform=axes.rotateX ? "rotate(-45) translate(-8, 14)" : "translate(0 20)"
              )=x
              
          // OPTIONAL GUIDE LINE
          if !isEmpty(axes.guideLine)
            - var y = 100*fy(maxY + minY - axes.guideLine)+"%"
            line(
              x1="0" y1=y x2="100" y2=y
              stroke="#333"
              stroke-width=.25
              stroke-dasharray=(false ? 1 : "")
            )

          // CHART LINES
          svg(
            height="100%"
            width="100%"
            viewBox="0 0 100 100"
            preserveAspectRatio="none"
          )

            // SERIES LINES
            for item, i in chart.series
              if i
                polyline(
                  fill="none"
                  stroke=chart.colors[chart.series[i].color]
                  stroke-dasharray=(item.dashed ? 10 : "")
                  stroke-width=(item.widen ? 6 : 3)
                  stroke-linejoin=(item.dashed ? "": "round")
                  stroke-linecap=(item.dashed ? "": "round")
                  points=(item.values.map( (y, ix) => {
                    return isEmpty(y) ? "" : [
                      100 * fx(ix),
                      100 * fy(maxY + minY - y)
                    ].join(" ");
                  })).join(",")
                )
      
          for item, i in chart.series
            g
              for val, ix in item.values
                if false
                  circle(
                    r=7
                    cx=toPercent(fx(ix))
                    cy=toPercent(fy(maxY + minY - val))
                    fill=chart.colors[chart.series[i].color]
                    stroke='#fff'
                    stroke-width=0
                  )
                svg.chart-value(
                  x=toPercent(fx(ix))
                  y=toPercent(fy(maxY + minY - val))
                  style=`color: ${chart.colors[chart.series[i].color]}`
                )
                  if false
                    rect(
                      y=(i % 2 == 0 ? -12 : 24) - 12
                      height=14
                      width=24
                      x=-12
                      fill="#fff"
                    )
                  text(
                    y=(i % 1 == 0 ? -12 : 24)
                    text-anchor="middle"
                    fill=chart.colors[chart.series[i].color]
                  )
                    = val
      
      .row
        ul.legend.list-bare.txt-left.flex.flex-ch
          for ax, i in new Array(chart.series.length)
            if i
              li.legend-item
                span.legend-item-box(style=`background: #ffc52b`)
                span.legend-item-label= 'Assets (left)'
              li.legend-item
                span.legend-item-box(style=`background: ${chart.colors[chart.series[i].color]}`)
                span.legend-item-label= chart.series[i].title
              

      .chart-source.txt-left.txt-muted.txt-cond!= chart.source
      .chart-notes.txt-left.txt-muted.txt-cond!= chart.notes
      
      .tooltip

  script.


    /* --- USER TO UPDATE --- */
    const enableTooltips = false;
    const nLegendItems = 6;
    const nSeries = 7;
    /* --------------------- */
    
    const chart = document.querySelectorAll('.chart-content');
    const rects = document.querySelectorAll('rect');
    const vals = document.querySelectorAll('.chart-value');
    const series = document.querySelectorAll('.x-label');
    const tooltip = document.querySelector('.tooltip');
    const legendItems = document.querySelectorAll('.legend-item-label');
    
    if (enableTooltips) {
      window.addEventListener('DOMContentLoaded', () => {
        rects.forEach( (rect, i) => addHoverEventListeners(rect, i) );  
      });
    }
        
    function addHoverEventListeners(el, i) {
      el.addEventListener('mouseover', () => {
        
        let val = vals[i].innerHTML;
        let ser = series[ Math.floor(i/nLegendItems) ].innerHTML;
        let cat = legendItems[i % nLegendItems].innerHTML;
        let box = el.getBoundingClientRect();
        
        tooltip.innerHTML = val + " of " + ser + " countries were " + cat + " performing";
        tooltip.style.left = box.left + box.width/2 - tooltip.offsetWidth/2 + 'px';
        tooltip.style.top = box.top - tooltip.offsetHeight + 'px';
        tooltip.style.opacity = 1;
        
      });
      
      el.addEventListener('mouseleave', () => { 
        tooltip.style.opacity = 0;
      });
      
    }
    
  
block append css
  style
    :sass
    
      .wrapper
        height: 550px

      .chart
        box-sizing: border-box
        position: relative

      .chart-content
        position: absolute
        top: 20px
        left: 50px
        right: 50px
        bottom: 40px

      .chart-content > svg
        border-bottom: 1px solid #bbb

      .chart-title
        margin: auto
        font-size: 20px
        
      .chart-subtitle
        font-weight: 600
        height: 10px
        margin-top: -10px
        font-size: 15px
        
      .tooltip
        position: absolute
        left: 0
        background: #fffe
        padding: .75em
        opacity: 0
        border-radius: .2em
        box-shadow: 0 0 5px 0 #0004
        transition-duration: 0.5s
        pointer-events: none
        font-size: 14px
        text-transform: lowercase
        max-width: 180px
        box-sizing: border-box

      li
        list-style: none
        margin: 0
        padding: 4px 16px 4px 24px

      .legend
        font-size: 15px
        margin-bottom: .75em

      .legend-item
        margin: 4px 24px 0
        padding-right: 0
        position: relative
        white-space: nowrap

      .legend-item-box
        position: absolute
        left: -1em
        top: .85em
        height: .25em
        width: 2em
        background: black

      polyline
        vector-effect: non-scaling-stroke

      text
        font-size: 13px
        fill: currentColor

      svg
        overflow: visible
        
      .chart-notes, .chart-source
        margin: 1em 0 0 2em
        font-size: 15px
        
      .chart-value
        opacity: 0
        transition-duration: .4s
        pointer-events: none
      
      .chart-content:hover .chart-value
        opacity: 0

      .bars svg rect
        fill: #ffc52b

      .y-label,.y-label2
        color: #4b4f56
        font-size: 15px
      .y-label
        transform: rotate(-90deg) translate(-2.5rem, -2.4rem)
      .y-label2
        transform: rotate(-90deg) translate(-2rem, .7rem) !important
    


      @media (max-width: 700px)
        
        .x-label text
          text-anchor: end
          transform: rotate(-45deg) translate(-8px, 14px)

        text,.y-label,.y-label2
          font-size: 13px

        .y-right text
          transform: translate(.75rem,0)

        .y-left
          transform: translate(-.1rem,0)
        .y-label
        transform: rotate(-90deg) translate(-2.5rem, -2.4rem)

        .y-label2
          transform: rotate(-90deg) translate(-1.5rem,1.75rem) !important
          
      @media (max-width: 450px)
        .chart-content
          bottom: 40px
        .legend
          flex-direction: column
        .chart-title
          font-size: 18px
        .chart-subtitle
          font-size: 14px
        .chart-notes,
        .chart-source
          text-align: center
          font-size: 12px
          line-height: 1.2
        text,.y-label,.y-label2
          font-size: 11px
        .legend
          font-size: 13px
          flex-wrap: wrap;
          margin-top: 4px
        .legend-item
          margin: 0px 8px 0
        li
          padding: 4px 12px 1px 20px

      @media (max-width: 375px)
        text,.y-label,.y-label2
          font-size: 10px