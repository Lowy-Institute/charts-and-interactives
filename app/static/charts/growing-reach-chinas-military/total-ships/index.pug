extend /partials/layout

block append config
  - var datapath = "static/charts/growing-reach-chinas-military/total-ships/data"
  - var colorpath = "static/charts/templates/colors/data"
  - _.extend(page, data.getOne(datapath))
  - _.extend(page, data.getOne(colorpath))
  - toPercent = (n) => (n * 100).toFixed(2) + "%"
  - isEmpty = (y) => (y === undefined || y == null || y.length <= 0)
  - chart = page
  
block page
  .wrapper.flex
    .txt-center.flex.flex-grow.flex-col
      .chart-title!= chart.title
      .chart-subtitle.txt-muted.txt-tu.pv-sm!= chart.subtitle
      .chart.flex-grow: .chart-content
        - ln = chart.series[0].values.length
        - axes = chart.axes
        - minY = axes.minY
        - maxY = axes.maxY
        - range = maxY - minY
        - fx = (i) => (i + 0.6) / (ln + 0.25)
        - fy = (y) => (y - minY) / range
        
        svg(height="100%" width="100%")
        
          // Y-Axis labels
          svg(height="100%")
            - let steps = chart.axes.stepsY-1
            for n, i in new Array(steps+1)
              - y = 1 - (i / (steps))
              svg(y=toPercent(y))
                text(text-anchor="end" transform="translate(-8 4)")
                  = minY + range*(i/steps) + (axes.percentage ? "%" : "")
                
          // Y-Axis minor lines
          if chart.axes.minorLines
            svg(height="100%")
              for n, i in new Array(steps)
                - y = (i / steps)
                svg
                  line(
                    x1="0%"
                    y1=toPercent(y)
                    x2="100%"
                    y2=toPercent(y)
                    stroke="#5552"
                    stroke-dasharray=(chart.axes.dotted.includes(steps-i) ? 5 : "")
                  )

          // X-Axis labels
          for x, i in chart.series[0].values
            svg.x-label(x=toPercent(fx(i)) y="100%")
              text(
                text-anchor=axes.rotateX ? "end" : "middle"
                transform=axes.rotateX ? "rotate(-45) translate(-8, 14)" : "translate(0 20)"
              )=x
              
          // OPTIONAL GUIDE LINE
          if !isEmpty(axes.guideLine)
            - var y = 100*fy(maxY + minY - axes.guideLine)+"%"
            line(
              x1="0" y1=y x2="100" y2=y
              stroke="#333"
              stroke-width=.25
              stroke-dasharray=(false ? 1 : "")
            )

          // CHART LINES
          svg(
            height="100%"
            width="100%"
            viewBox="0 0 100 100"
            preserveAspectRatio="none"
          )
            // SERIES LINES
            for item, i in chart.series
              if i
                if i > 2
                  - estimates = ln - 11
                  polyline(
                    fill="none"
                    stroke=chart.colors[chart.series[i].color]
                    stroke-dasharray=(item.dashed ? 10 : "")
                    stroke-width=(item.widen ? 6 : 3)
                    stroke-linejoin=(item.dashed ? "": "round")
                    points=(item.values.slice(0,estimates+1).map( (y, ix) => {
                      return isEmpty(y) ? "" : [
                        100 * fx(ix),
                        100 * fy(maxY + minY - y)
                      ].join(" ");
                    })).join(",")
                  )
                  polyline(
                    fill="none"
                    stroke=chart.colors[chart.series[i].color]
                    stroke-dasharray='5'
                    stroke-width=(item.widen ? 6 : 3)
                    stroke-linejoin=(item.dashed ? "": "round")
                    points=(item.values.slice(estimates).map( (y, ix) => {
                      return isEmpty(y) ? "" : [
                        100 * fx(ix + estimates),
                        100 * fy(maxY + minY - y)
                      ].join(" ");
                    })).join(",")
                    )
                else
                  line(
                    fill="none"
                    stroke=chart.colors[chart.series[i].color]
                    stroke-dasharray=(item.dashed ? 5 : "")
                    stroke-width=(item.widen ? 6 : 1.5)
                    stroke-linejoin=(item.dashed ? "": "round")
                    stroke-linecap=(item.dashed ? "": "round")
                    opacity="0.67"
                    x1=(100 * fx(0))
                    y1=(100 * fy(maxY + minY - item.values[0]))
                    x2=(100 * fx(ln))
                    y2=(100 * fy(maxY + minY - item.values[1]))
                  )
      
          for item, i in chart.series
            g
              for val, ix in item.values
                if false
                  circle(
                    r=7
                    cx=toPercent(fx(ix))
                    cy=toPercent(fy(maxY + minY - val))
                    fill=chart.colors[chart.series[i].color]
                    stroke='#fff'
                    stroke-width=0
                  )
                if i > 2
                  svg.chart-value(
                    x=toPercent(fx(ix))
                    y=toPercent(fy(maxY + minY - val))
                    style=`color: ${chart.colors[chart.series[i].color]}`
                  )
                    if false
                      rect(
                        y=(i % 2 == 0 ? -12 : 24) - 12
                        height=14
                        width=24
                        x=-12
                        fill="#fff"
                      )
                    text(
                      y=( (i == 3 && ix > 4 && ix < 10) ? 24 : -12)
                      text-anchor="middle"
                      fill=chart.colors[chart.series[i].color]
                    )
                      = val
      
      .row
        ul.legend.list-bare.txt-left.flex.flex-ch
          for ax, i in new Array(chart.series.length)
            if i > 2
              li.legend-item
                span.legend-item-box(style=`background: ${chart.colors[chart.series[i].color]}`)
                span.legend-item-label= chart.series[i].title

      //- .chart-source.txt-right.txt-muted.txt-cond!= chart.source
      .chart-notes.txt-muted <b>Figure 2:</b> The US Department of Defense “Battle Force 2045” plan would rebalance its fleet away from larger ships, such as aircraft carriers and cruisers, to more numerous but smaller and cheaper vessels.
    
  
block append css
  style
    :sass
    
      .wrapper
        height: 575px

      .chart
        box-sizing: border-box
        position: relative

      .chart-content
        position: absolute
        top: 20px
        left: 50px
        right: 20px
        bottom: 60px

      .chart-content > svg
        border-bottom: 1px solid #bbb

      .chart-title
        font-weight: 600
        margin-right: auto
        font-size: 30px
        text-align: left
        
      .chart-subtitle
        height: 10px
        font-weight: 600
        margin-right: auto
        margin-top: -14px
        font-size: 16px
        letter-spacing: 0.05em
        
      .tooltip
        position: absolute
        left: 0
        background: #fffe
        padding: .75em
        opacity: 0
        border-radius: .2em
        box-shadow: 0 0 5px 0 #0004
        transition-duration: 0.5s
        pointer-events: none
        font-size: 14px
        text-transform: lowercase
        max-width: 180px
        box-sizing: border-box

      li
        list-style: none
        margin: 0
        padding: 4px 16px 4px 24px

      .legend
        font-size: 15px
        margin-bottom: .75em

      .legend-item
        margin: 4px 8px 0
        padding-right: 0
        position: relative
        white-space: nowrap

      .legend-item-box
        position: absolute
        left: 0
        top: .5em
        height: 1em
        width: 1em
        background: black

      path,
      line,
      polyline
        vector-effect: non-scaling-stroke

      text
        font-size: 14px
        fill: currentColor

      svg
        overflow: visible
        
      .chart-notes, .chart-source
        margin-top: .5rem
        font-size: 15px
        
      .chart-value
        &:nth-child(even)
          display: none
        opacity: 0
        transition-duration: .4s
        pointer-events: none
      
      .chart-content:hover .chart-value
        opacity: 1
        
      .x-label
        &:nth-child(2n)
          display: none

      @media (max-width: 700px)
        .chart-title
          font-size: 26px
          
        text
          font-size: 13px
          
      @media (max-width: 450px)
        .chart-content
          bottom: 40px
        .legend
          flex-direction: column
        .chart-title
          font-size: 22px
        .chart-subtitle
          font-size: 14px
        .chart-notes,
        .chart-source
          text-align: center
          font-size: 13px
