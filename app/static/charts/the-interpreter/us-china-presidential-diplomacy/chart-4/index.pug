extend /partials/layout

block append config
  - var datapath = "static/charts/the-interpreter/us-china-presidential-diplomacy/chart-4/data"
  - var colorpath = "static/charts/templates/colors/data"
  - _.extend(page, data.getOne(datapath))
  - _.extend(page, data.getOne(colorpath))
  - toPercent = (n) => (n * 100).toFixed(2) + "%"
  - colors = []
  
block page
  .wrapper.flex
    .flex.flex-grow.flex-col
      .chart-title Visits to foreign countries by US and Chinese presidents, by region
      each chart, ci in page.charts
        .chart-subtitle.txt-muted.txt-tu!= chart.title
        .chart.flex-grow: .chart-content
          - ln = chart.series[0].values.length
          - axes = chart.axes
          - min = axes.min
          - max = axes.max
          - range = max - min
          - fx = (x) => (x - min) / range
          - fy = (i) => (i + 0.75) / (ln - 0.1)
          
          svg(height="100%" width="100%")
                    
            // Y-Axis labels
            - steps = chart.axes.steps-1
            if ci === 2
              svg(height="100%" y="100%")
                for n, i in new Array(steps+1)
                  - y = (i / (steps))
                  svg.x-label(x=toPercent(y))
                    text(text-anchor="middle" transform="translate(0 20)")
                      = (min + range*(i/steps)).toFixed(0) + (axes.percentage ? "%" : "")
                  
            // Y-Axis minor lines
            if chart.axes.minorLines
              svg(height="100%")
                for n, i in new Array(steps + 1)
                  - x = (i / steps)
                  svg
                    line(
                      y1="0%"
                      x1=toPercent(x)
                      y2="100%"
                      x2=toPercent(x)
                      stroke="#5554"
                      stroke-dasharray=(chart.axes.dotted.includes(steps-i) ? 5 : "")
                    )

            // Chart rects
            g
            
              for seriesname, i in chart.series[0].values
                svg(
                  x="0"
                  y=toPercent(fy(i) - fy(-0.1))
                  height=toPercent(fy(0))
                  width="100%"
                )
                
                  g.bars
                    - series = chart.series.filter( (s, i) => i )
                    for set, j in series 
                      - v = set.values[i]
                      - thickness = 1 / series.length
                    
                      rect(
                        y=toPercent(j*thickness)
                        x=0
                        height=toPercent(thickness)
                        width=toPercent(fx(v))
                        fill=page.colors[set.color]
                        data-category=set.title
                        data-series=seriesname
                        data-value=v
                        data-years=chart.title
                      )

                      text.chart-value(
                        y=toPercent(j*thickness + thickness/2)
                        x=toPercent(fx(v))
                        text-anchor="start"
                        transform=`translate(8 6)`
                        style=`color: ${page.colors[set.color]}`
                      )
                        = v + (axes.percentage ? "%" : "")

                      // X-Axis labels
                      svg.x-label(y="50%")
                        text(
                          text-anchor="end"
                          transform=`translate(-10 6)`
                        )
                          =seriesname
      
      .row
        ul.legend.list-bare.txt-left.flex
          for ax, i in new Array(page.charts[0].series.length)
            if i
              li.legend-item
                span.legend-item-box(style=`background: ${page.colors[page.charts[0].series[i].color]}`)
                span.legend-item-label= page.charts[0].series[i].title

      .chart-source!= page.source
      .chart-notes!= page.notes
      
      .tooltip
      
  script.
    /* --- USER TO UPDATE --- */
    const enableTooltips = true;
    const nCategories = 2;
    /* --------------------- */
    
    const chart = document.querySelectorAll('.chart-content');
    const rects = document.querySelectorAll('rect');
    const vals = document.querySelectorAll('.chart-value');
    const series = document.querySelectorAll('.x-label');
    const tooltip = document.querySelector('.tooltip');
    const legendItems = document.querySelectorAll('.legend-item-label');
    
    if (enableTooltips) {
      window.addEventListener('DOMContentLoaded', () => {
        rects.forEach( (rect, i) => addHoverEventListeners(rect, i) );  
      });
    }
        
    function addHoverEventListeners(el, i) {
      el.addEventListener('mouseover', () => {
        
        let box = el.getBoundingClientRect();
        let val = el.dataset.value;
        let cat = el.dataset.category;
        let years = el.dataset.years.trim()
        let ser = el.dataset.series
          .replace("Middle East","the Middle East")
          .replace("E.","eastern")
          .replace("W.","western")
          .replace("N.","North")
          .replace("S.","South")
        
        rects.forEach(r => r.classList.add('dim'))
        el.classList.remove('dim')
        
        tooltip.style.left = box.left - 0 + 'px';
        tooltip.style.top = box.top + 16 + 'px';
        tooltip.style.opacity = 1;
        
        tooltip.innerHTML = `Between ${years}, ${cat} visited ${ser} ${+val === 1 ? 'once' : val + ' times'}.`;
        
      });
      el.addEventListener('mouseleave', () => { 
        tooltip.style.opacity = 0;
        rects.forEach(r => r.classList.remove('dim'))
      });
    }
    
  
block append css
  style
    :sass
    
      .wrapper
        height: 950px

      .chart
        box-sizing: border-box
        position: relative

      .chart-content
        position: absolute
        top: 20px
        left: 90px
        right: 20px
        bottom: 20px

      .chart-title
        font-size: 28px
        font-weight: 700
        margin-bottom: 8px
        
      .chart-subtitle
        font-weight: 700
        height: 10px
        font-size: 15px
        
      .tooltip
        position: absolute
        left: 0
        background: #fffe
        padding: .75em
        opacity: 0
        border-radius: .2em
        box-shadow: 0 0 5px 0 #0004
        transition-duration: 0.5s
        pointer-events: none
        font-size: 14px
        width: 200px

      li
        list-style: none
        margin: 0
        padding: 4px 16px 4px 24px

      .legend
        font-size: 15px
        margin-top: 1.25em
        margin-bottom: .75em

      .legend-item
        margin: 4px 8px 4px 0
        padding-right: 0
        position: relative
        white-space: nowrap

      .legend-item-box
        position: absolute
        left: 0
        top: .5em
        height: 1em
        width: 1em
        background: black

      text
        font-size: 14px
        fill: currentColor

      svg
        overflow: visible
        
      rect
        opacity: 1
        transition: opacity 0.2s 0.05s
        
        &.dim
          opacity: 0.5
          transition-delay: 0
        
        
      .chart-notes, .chart-source
        font-size: 14px
        margin-right: auto
        
      .chart-value
        opacity: 0
        transition-duration: .4s
        pointer-events: none
      
      line
        vector-effect: non-scaling-stroke

      @media (max-width: 700px)
          
        text
          font-size: 13px
          
      @media (max-width: 450px)
        .legend-item
          width: min-content
        .x-label:nth-child(even)
          display: none
        .chart-title
          font-size: 18px
        .chart-subtitle
          font-size: 14px
        .chart-notes,
        .chart-source
          text-align: center
          font-size: 13px
        .chart-value
          display: none
