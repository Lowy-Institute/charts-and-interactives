extend /partials/layout

block append config
  - var datapath = "static/charts/the-interpreter/india-china-us/data"
  - var colorpath = "static/charts/templates/colors/data"
  - _.extend(page, data.getOne(datapath))
  - _.extend(page, data.getOne(colorpath))
  - toPercent = (n) => (n * 100).toFixed(2) + "%"
  - chart = page
  - colors = []
  
block page
  .wrapper.flex
    .txt-center.flex.flex-grow.flex-col
      .chart-title!= chart.title
      //.chart-subtitle.txt-muted.txt-tu.p-sm!= chart.subtitle
      .chart.flex-grow: .chart-content
        - ln = chart.series[0].values.length
        - axes = chart.axes
        - minY = axes.minY
        - maxY = axes.maxY
        - range = maxY - minY
        - buckets = ["Overall", "Democrats", "Republicans"]
        - fx = (i) => (i + 0.1) / (ln + 0.35)
        - fy = (y) => (y - minY) / range
        
        svg(height="100%" width="100%")
        
          // Y-Axis labels
          svg(height="100%")
            - let steps = chart.axes.stepsY-1
            for n, i in new Array(steps+1)
              - y = 1 - (i / (steps))
              svg(y=toPercent(y))
                text(text-anchor="end" transform="translate(-8 4)")
                  = minY + range*(i/steps) + (axes.percentage ? "%" : "")
                  
          svg(width="100%")
            for n, i in new Array(4)
              - x = i ? 100*(fx(i*3)+fx(-1/6))+"%" : 100*fx(i*3)+"%"
              line(
                x1=x x2=x
                y1="100%" y2="120%"
                stroke="#bbb"
              )
                
          // Y-Axis minor lines
          if chart.axes.minorLines
            svg(height="100%")
              for n, i in new Array(steps)
                - y = (i / steps)
                svg
                  line(
                    x1="0%"
                    y1=toPercent(y)
                    x2="100%"
                    y2=toPercent(y)
                    stroke="#5552"
                    stroke-dasharray=(chart.axes.dotted.includes(steps-i) ? 5 : "")
                  )

          // Chart rects
          g
          
            for seriesname, i in chart.series[0].values
              svg(
                x=toPercent(fx(i))
                y=toPercent(fy(minY))
                width=toPercent(fx(0))
                height="100%"
              )
              
                g.bars

                  for set, j in chart.series.filter( (s, i) => i )
                    - y = set.values[i]
                    - w = 60/(chart.series.length-1)
                  
                    rect(
                      x=(j*w)
                      y=toPercent(fy(maxY) - fy(y))
                      width=w
                      height=toPercent(fy(y))
                      fill=chart.colors[set.color]
                    )

                    text.chart-value(
                      x=(j*w)
                      y=toPercent(fy(maxY) - fy(y))
                      text-anchor="middle"
                      transform=`translate(${w/2} -10)`
                    )
                      = y + (axes.percentage ? "%" : "")

                    // X-Axis labels
                    svg.x-label(x="50%" y="100%")
                      text(
                        text-anchor=axes.rotateX ? "end" : "middle"
                        transform=axes.rotateX ? "rotate(-45) translate(-8, 14)" : "translate(24 20)"
                      )
                        =seriesname
                      
                    if ( i%3 == 1)
                      svg.buckets(x="50%" y="100%")
                        text(
                          text-anchor="middle"
                          transform="translate(24 50) scale(1.1)"
                          style="opacity: 0.5;"
                        )= buckets[(i-1)/3]
      
      .row
        ul.legend.list-bare.txt-left.flex.flex-ch
          for ax, i in new Array(chart.series.length)
            if i
              li.legend-item
                span.legend-item-box(style=`background: ${chart.colors[chart.series[i].color]}`)
                span.legend-item-label= chart.series[i].title

      //.chart-source.txt-right.txt-muted.txt-cond!= chart.source
      //.chart-notes.txt-right.txt-muted.txt-cond!= chart.notes
      
      .tooltip
      
  script.
    /* --- USER TO UPDATE --- */
    const enableTooltips = true;
    const buckets = ["all respondants", "Democrats", "Republicans"];
    const nCategories = 2;
    /* --------------------- */
    
    const chart = document.querySelectorAll('.chart-content');
    const rects = document.querySelectorAll('rect');
    const vals = document.querySelectorAll('.chart-value');
    const series = document.querySelectorAll('.x-label');
    const tooltip = document.querySelector('.tooltip');
    const legendItems = document.querySelectorAll('.legend-item-label');
    
    if (enableTooltips) {
      window.addEventListener('DOMContentLoaded', () => {
        rects.forEach( (rect, i) => addHoverEventListeners(rect, i) );  
      });
    }
        
    function addHoverEventListeners(el, i) {
      el.addEventListener('mouseover', () => {
        
        let box = el.getBoundingClientRect();
        let l = box.left - 90;
        let dr = window.innerWidth - (l + 180);
        let val = vals[i].innerHTML;
        let ser = series[i].innerHTML;
        let cat = legendItems[i%nCategories].innerHTML;
        let bucket = buckets[Math.floor(i/(nCategories*buckets.length))];
        
        ser.includes('Neither') ? ser = "neither China or India" : "";
        ser.includes('China') ? ser = "China over India" : "";
        ser.includes('India') ? ser = "India over China" : "";
        
        tooltip.style.left = l < 0 ? '3px' : dr < 0 ? (l-27)+'px' : l+'px';
        tooltip.style.top = box.top + 10 + 'px';
        
        tooltip.style.opacity = 1;
        
        tooltip.innerHTML = val + " of " + bucket + " would support " + ser + " if they were engaged in " + cat.toLowerCase();
        
      });
      el.addEventListener('mouseleave', () => { 
        tooltip.style.opacity = 0;
      });
    }
    
  
block append css
  style
    :sass
    
      .wrapper
        height: 550px
        max-width: 830px
        padding: 0 1em

      .chart
        box-sizing: border-box
        position: relative

      .chart-content
        position: absolute
        top: 20px
        left: 50px
        right: 20px
        bottom: 80px

      .chart-content > svg
        border-bottom: 1px solid #bbb

      .chart-title
        margin: auto
        font-size: 20px
        max-width: 510px
        
      .chart-subtitle
        font-weight: 600
        height: 10px
        margin-top: -10px
        font-size: 15px
        
      .tooltip
        position: absolute
        left: 0
        background: #fffe
        padding: .75em
        opacity: 0
        border-radius: .2em
        box-shadow: 0 0 5px 0 #0004
        transition-duration: 0.5s
        pointer-events: none
        font-size: 14px
        max-width: 180px

      li
        list-style: none
        margin: 0
        padding: 4px 16px 4px 24px

      .legend
        font-size: 15px
        margin-bottom: .75em

      .legend-item
        margin: 4px 8px 0
        padding-right: 0
        position: relative

      .legend-item-box
        position: absolute
        left: 0
        top: .5em
        height: 1em
        width: 1em
        background: black

      text
        font-size: 14px
        fill: currentColor

      svg
        overflow: visible
        
      .chart-notes, .chart-source
        margin-left: 2em
        font-size: 15px
        
      .chart-value
        opacity: 0
        transition-duration: .4s
        pointer-events: none
        font-size: 14px
      
        .chart-content:hover &
          opacity: 0

      @media (max-width: 700px)
        .chart-content
          left: 40px
          right: 5px
          bottom: 80px
          top: 30px
          
        .chart-title
          font-size: 16px
          max-width: 450px  
          
        rect
          width: 350%
          
        $n-series: 3
        @for $i from 2 through $n-series
          rect:nth-of-type(#{$i})
            x: ($i - 1)*350%
          
        .x-label text
          text-anchor: end
          transform: rotate(-90deg) translate(-10px, 22px)
        
        .buckets text
          transform: translate(18px, 70px)
          
        text
          font-size: 13px
          
      @media (max-width: 600px)
        
        .x-label text
          transform: rotate(-90deg) translate(-10px, 16px)
        
        
      @media (max-width: 450px)
        .legend-item
          width: min-content
        .chart-title
          padding: 0 1.5em
        .chart-subtitle
          font-size: 14px
        .chart-notes,
        .chart-source
          text-align: center
          font-size: 13px
        .chart-value
          display: none
          
        .x-label text
          transform: rotate(-90deg) translate(-10px, 12px)
        .buckets text
          transform: translate(10px, 70px)
          
