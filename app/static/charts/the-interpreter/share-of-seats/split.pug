extend /partials/layout

block append config
  - page.data = data.getOne("static/charts/the-interpreter/share-of-seats/split")
  - page.data.elections.forEach(function(e){e.date = new Date(e.start); })
  - page.data.elections = _.sortBy(page.data.elections, "date").filter((e) => e.date - new Date("May 18 1960") > 0)
  - helpers = r("./" + __.directory + "/utils.coffee")
  - console.log(page.data.elections.slice(-1))

block page
  - var d1 = new Date("May 18 2019");
  - var d0 = new Date("May 18 1969");
  - var dd = moment(d1).diff(d0);
  - var w = 1000, h = 240;

  mixin grid(n)
    - offset = (new Date("Jan 1 2019") - d1) / (d1 - d0)
    g
      for el, i in new Array(51)
        - d = i / 50, x = d * w + offset * w
        line.tick(
          x1=x
          x2=x
          y1=0
          y2="100%"
          class=(i % 5 === 0 ? "y5" : "y1")
        )
        if i % 5 === 0
          text(transform="translate(0 16)" text-anchor="middle" x=x y="100%")= 1969 + d * 50

    g(transform=`translate(${-offset * w} 0)`)
      for el, i in new Array(n + 1)
        - d = i / n
        line.tick(
          y1=d*h
          y2=d*h
          x1=offset * w * 2
          x2="100%"
          class=(i === n ? "y5" : "y1")
        )
        if i % 2 == 0
          text(transform="translate(8 0)" text-anchor="start" y=d*h + 5 x="100%") #{(n - i) * 10}%

  .pv-md
    h4.txt-bold Share of Power
    p
      | 1969–2019
      br
      | Coalition / Labor / Others
      br
      | Normalised across change in number of members.

    p Cumulative Share of Power Across All Government
    svg(width=w height=h)
      +grid(6)

      - list = {c: [], l: [], o: [], e: [], t: []}
      for prev, i in page.data.elections.filter((e) => e.date - new Date("May 18 1919") > 0)
        - c = 0, l = 0, o = 0, n = 0;

        for other in page.data.elections
          - end = other.end === "Current" ? d1 : new Date(other.end)
          if other.date <= prev.date && end > prev.date
            - c += other.coalition
            - l += other.labor
            - o += other.other
            - n++

        - list.e.push(prev)
        - list.c.push(c)
        - list.l.push(l)
        - list.o.push(o)
        - list.t.push(c+l+o)

      //- - console.log(list)
      for key, k in ["c", "l", "o"]
        - var path = []
        g
          for el, i in list[key]
            - var d = new Date(list.e[i].start)
            - var x = w * ((d - d0) / dd)
            - var y = h * (1 - el / ((list.c[i] + list.l[i] + list.o[i]) * 0.6))
            //- circle(cx=x cy=y r=1 d-el=el)
            - path[i] = {x:x,y:y}

        - c = function(p){return `M ${_.first(p).x},${h} ${helpers.catmullRomBezier(p, 0.5)} L ${w},${_.last(p).y} L ${w},${h} Z`}
        - cx = function(p){return `M ${_.first(p).x},${h} ${helpers.catmullRomBezier(helpers.simplify(helpers.interpolate(p), 21, true).concat(p.slice(-3)), 0.5)} L ${w},${_.last(p).y} L ${w},${h} Z`}
        path(d=c(path) class=`a${k}` style="pointer-events: none")
        path.a6(d=cx(path) fill="none")

  //- pre
    for n, i in list.c
      = list.e[i].government + ","
      = list.e[i].start + ","
      = list.c[i] + ","
      = list.l[i] + ","
      = list.o[i] + ","
      = list.t[i] + "\n"


  for filter in [{government: "FED", house: "lower"},{government: "FED", house: "upper"},{government: "ACT", house: "lower"},{government: "NSW", house: "lower"},{government: "NSW", house: "upper"},{government: "NT", house: "lower"},{government: "QLD", house: "lower"},{government: "SA", house: "lower"},{government: "SA", house: "upper"},{government: "TAS", house: "lower"},{government: "TAS", house: "upper"},{government: "VIC", house: "lower"},{government: "VIC", house: "upper"},{government: "WA", house: "lower"},{government: "WA", house: "upper"}]
    - var paths = [[],[],[]], h = 240;
    - var list = _.where(page.data.elections, filter)

    .pv-sm
      p
        strong
          | #{filter.government} –
          | #{written.capitalize(filter.house)} House

      p Top dawg
        svg(width=w height=h)
          rect(x=0 y=0 width=w height=h fill="#fff")

          +grid(10)

          for e, i in list
            - var d = new Date(e.date)
            - var max = _.max(list.map(function(e){return Math.max(e.coalition, e.labor, e.other)}))
            - x = ((d - d0) / dd) * w
            - if (i == 0) x0 = x
            g
              - t = e.coalition + e.labor + e.other
              - y = (1 - e.coalition / t) * h
              circle(cx=x cy=y r=3 fill="blue")
              if e.coalition > 0
                text(x=x y=(e.coalition > e.labor ? y - 8 : y + 16) text-anchor="middle")= e.coalition
              - paths[0][i] = {x:x,y:y}

              - y = (1 - e.labor / t) * h
              circle(cx=x cy=y r=3 fill="red")
              if e.labor > 0
                text(x=x y=(e.coalition < e.labor ? y - 8 : y + 16) text-anchor="middle")= e.labor
              - paths[1][i] = {x:x,y:y}

              - y = (1 - e.other / t) * h
              circle(cx=x cy=y r=3 fill="#ccc")
              if e.other > 0
                text(x=x y=(e.other / t < .1 ? y - 8 : y + 16) text-anchor="middle" data-d=e.other / t)= e.other
              - paths[2][i] = {x:x,y:y}


              - y = (1 - ((e.coalition + e.labor) / 2) / max) * h

          g
            - c = function(p){return `M ${x0},${h} ${helpers.catmullRomBezier(p, 0.5)} L ${w},${h} Z`}
            - cc = function(p){return `M ${p[0].x},${p[0].y} ${helpers.catmullRomBezier(p, 0.5)}`}
            path.a0(d=c(paths[0].concat({y:_.last(paths[0]).y,x:w})))
            path.a1(d=c(paths[1].concat({y:_.last(paths[1]).y,x:w})))
            path.a2(d=cc(paths[2].concat({y:_.last(paths[2]).y,x:w})))

      - h = 200
      - var max = _.max(list.map(function(e){return e.coalition + e.labor + e.other}))

      p Trend
        svg(width=w height=h)
          rect(x=.5 y=.5 width=w-1 height=h-1 fill="#fff")

          for e, i in list
            - var d = new Date(e.date)
            - x = ((d - d0) / dd) * w
            - t = e.coalition + e.labor + e.other

            - y = (1 - e.coalition / t) * h
            - paths[0][i] = {x:x,y:y}

            - y = (1 - (e.coalition + e.other) / t) * h
            - paths[1][i] = {x:x,y:y}

          - paths[0] = _.filter(paths[0], ((e) => e.y >= 0))
          - paths[0].push({y: _.last(paths[0]).y, x: w})
          - paths[1] = _.filter(paths[1], ((e) => e.y >= 0))
          - paths[1].push({y: _.last(paths[1]).y, x: w})

          g(data-paths=paths)
            - c1 = function(p){return `M ${_.first(p).x},${h} ${helpers.catmullRomBezier(p, 1)} L ${_.last(p).x},${h} Z`}
            - c2 = function(p){return `M ${_.first(p).x},${0} ${helpers.catmullRomBezier(p, 1)} L ${_.last(p).x},${0} Z`}
            path.a4(d=c1(paths[0]) fill="blue")
            path.a5(d=c2(paths[1]) fill="red")

      p Actual
        svg(width=w height=h)
          rect(x=.5 y=.5 width=w-1 height=h-1 fill="#fff")

          for e, i in list
            - var d = new Date(e.date)
            - x = ((d - d0) / dd) * w
            - t = e.coalition + e.labor + e.other

            - y = (1 - e.coalition / t) * h
            - paths[0][i] = {x:x,y:y}

            - y = (1 - (e.coalition + e.other) / t) * h
            - paths[1][i] = {x:x,y:y}

          - paths[0] = _.filter(paths[0], ((e) => e.y >= 0))
          - paths[0].push({y: _.last(paths[0]).y, x: w})
          - paths[1] = _.filter(paths[1], ((e) => e.y >= 0))
          - paths[1].push({y: _.last(paths[1]).y, x: w})

          g(data-paths=paths)
            - c1 = function(p){return `M ${_.first(p).x},${h} ${p.map((e,i) => [e.x,e.y].join(",")+ " L " + [(p[i+1]||{x:w}).x,e.y].join(",")).join(" L ")} L ${_.last(p).x},${h} Z`}
            - c2 = function(p){return `M ${_.first(p).x},${0} ${p.map((e,i) => [e.x,e.y].join(",")+ " L " + [(p[i+1]||{x:w}).x,e.y].join(",")).join(" L ")} L ${_.last(p).x},${0} Z`}
            rect(fill="none" stroke="#ccc" x=0 y=0 width=w height=h)
            path.a4(d=c1(paths[0]))
            path.a5(d=c2(paths[1]))
            line(stroke="#000" x1=_.first(paths[0]).x x2=_.last(paths[0]).x y1="50%" y2="50%")

  svg
    defs
      linearGradient(x1="0%" y1="0%" x2="0%" y2="100%" id="g-coalition")
        stop(offset="0%"   stop-color="rgba(50,80,230,1.00)")
        stop(offset="100%" stop-color="rgba(50,80,230,0.25)")
      linearGradient(x1="0%" y1="0%" x2="0%" y2="100%" id="g-labor")
        stop(offset="0%"   stop-color="rgba(230,50,50,1.00)")
        stop(offset="100%" stop-color="rgba(230,50,50,0.25)")
      linearGradient(x1="0%" y1="0%" x2="0%" y2="100%" id="g-coalition-2")
        stop(offset="0%"   stop-color="rgba(50,80,230,0.6)")
        stop(offset="100%" stop-color="rgba(50,80,230,0.2)")
      linearGradient(x1="0%" y1="100%" x2="0%" y2="0%" id="g-labor-2")
        stop(offset="0%"   stop-color="rgba(230,50,50,0.6)")
        stop(offset="100%" stop-color="rgba(230,50,50,0.2)")

  style
    :sass
      body, h1, h2, h3, h4
        font-family: Sans, sans-serif
      body
        font-size: 14px
        text-align: center

      svg
        margin: auto
        overflow: visible

      .a0,
      .a1
        fill-opacity: 0.85
        mix-blend-mode: multiply

      line
        stroke-opacity: 0.2

      .tick.y1
        stroke: #eee
        stroke-opacity: 1
      .tick.y5
        stroke: #ccc
        stroke-opacity: 1

      .a0
        fill: blue
        fill: url(#g-coalition)
      .a1
        fill: red
        fill: url(#g-labor)
      .a4
        fill: red
        fill: url(#g-coalition-2)
      .a5
        fill: red
        fill: url(#g-labor-2)
      .a2
        stroke: #ccc
        fill: none
        mix-blend-mode: luminosity
      .a6
        stroke: rgba(#000, 0.3)
      .a3
        fill: #ccc
