extend /partials/layout

block append config
  - var datapath = "static/charts/api/2020/asean/data"
  - _.extend(page, data.getOne(datapath))
  - toPercent = (n) => (n * 100).toFixed(2) + "%"

block page
  .wrapper.flex.flex-col
    .txt-center.flex.flex-grow.flex-col
      - chart = page.charts[0]
      .chart-title= page.title
      //.chart-subtitle.txt-muted.txt-sm= chart.subtitle

      .chart.flex-grow: .chart-content
        - scale = chart.scale
        - ln = chart.axes[1].values.length
        - fy = (i) => (i + 0.25) / (ln)
        - fx = (x) => (x - scale.minX) / (scale.maxX - scale.minX)
        - fw = (x) => Math.abs(x) / (scale.maxX - scale.minX)
        
        svg(height="100%" width="100%")
          for group, i in chart.groups
            - last = i == chart.groups.length - 1
            - end = last ? ln : chart.groups[i + 1].start

            svg(
              y=toPercent((group.start) / ln)
              height=toPercent((end - group.start) / ln)
              data-end=end
            )
              svg.label.txt-muted(y="50%" width="40%")
                text(y=15 transform="rotate(-90)")
                  tspan(
                    transform-origin="center"
                    text-anchor="middle"
                  )= group.name

              if !last
                line(y1="100%" y2="100%" x2="100%" stroke="#ccc")

          //- Scale
          svg.scale(y="100%")
            for n, i in new Array(scale.ticks)
              - x = (i / (scale.ticks - 1))
              - n = (scale.minX + (i/(scale.ticks - 1)) * (scale.maxX - scale.minX))
              svg(x=toPercent(x))
                text(text-anchor="middle" y=20)
                  = n >= 0 ? n : ""

              if n == 0
                line.scale-line(
                  x1=toPercent(x) x2=toPercent(x)
                  y1="-100%" y2=0
                )

              if n > 0
                line.scale-line.scale-line-dashed(
                  x1=toPercent(x) x2=toPercent(x)
                  y1="-100%" y2=0
                  stroke-dasharray="4 2"
                )

          g
            for xs, i in chart.axes[1].values
              - label = chart.axes[0].values[i]
              - x0 = 0
              - minx = 0
              svg(
                x=toPercent(0)
                y=toPercent(fy(i - 0.125))
                width="100%"
                height=toPercent(fy(0.5))
              )
                g.bars
                  for x, j in xs
                    - tx = x > 0 ? x0 : x
                    rect(
                      width=toPercent(fw(x))
                      x=toPercent(fx(tx))
                      height="100%"
                      fill=chart.colors[j]
                      data-country=label
                      data-cat=chart.legend[j]
                      data-v=x.toFixed(1)
                    )
                    
                    - if (x > 0) x0 += x
                    - minx = Math.min(minx, tx)
                    - smEndLabel = j == xs.length - 1 && x < 1.5
                    - xi = smEndLabel ? toPercent(fx(tx) + fw(x)) : toPercent(fx(tx) + fw(x) / 2)
                    - dx = smEndLabel ? 4 : 0
                    - cl = smEndLabel ? chart.colors[j] : "white"

                    text.chart-value(
                      class=x < 1.5 ? "hide" : ""
                      x=xi
                      y="50%"
                      transform=`translate(${dx} 4)`
                      text-anchor=smEndLabel ? "start" : "middle"
                      fill=cl
                    )
                      =x.toFixed(1)



                svg(x=toPercent(fx(minx)) y="100%")
                  text.country-labels(
                    y=-4 x=-8
                    text-anchor="end"
                  )
                    = label

      ul.legend.list-bare.txt-left.flex.flex-ch
        for item, i in chart.legend
          li.legend-item
            span.legend-item-box(style=`background:${chart.colors[i]}`)
            span.legend-item-label!= item

      .chart-source.txt-muted.txt-cond
        != marked(page.source)

        .tooltip.txt-sans
  
    script.
  
  
      /* --- USER TO UPDATE --- */
      const enableTooltips = true;
      const nLegendItems = 8;
      const nSeries = 10;
      /* --------------------- */
      
      const chart = document.querySelectorAll('.chart-content');
      const rects = document.querySelectorAll('rect');
      const vals = document.querySelectorAll('.chart-value');
      const tooltip = document.querySelector('.tooltip');
      
      if (enableTooltips) {
        window.addEventListener('DOMContentLoaded', () => {
          rects.forEach( (rect, i) => addHoverEventListeners(rect, i) );  
        });
      }
          
      function addHoverEventListeners(el, i) {
        el.addEventListener('mouseover', () => {
          
          let cty = el.dataset.country;
          let cat = el.dataset.cat;
          let val = el.dataset.v;
          let box = el.getBoundingClientRect();
          
          tooltip.innerHTML = `${cty}'${["Laos", "Philippines"].includes(cty) ? "" : "s"} <i>${cat}</i> score: ${val}`;
          tooltip.style.left = box.left + box.width/2 - tooltip.offsetWidth/2 + 'px';
          tooltip.style.top = box.top - tooltip.offsetHeight + 'px';
          tooltip.style.opacity = 1;
          
        });
        
        el.addEventListener('mouseleave', () => { 
          tooltip.style.opacity = 0;
        });
        
      }

block append css
  style
    :sass
      .wrapper
        height: 550px

      .chart
        position: relative

      .chart-content
        position: absolute
        top: 20px
        left: 10px
        right: 10px
        bottom: 32px

      .chart-title
        font-size: 26px
        
      .chart-title,
      .chart-subtitle
        padding: 0 24px

      .legend
        margin: 0 auto
        overflow: hidden
        font-size: 15px
        max-width: none
        flex-wrap: wrap

      .legend-item
        margin: 8px 8px 0
        padding-left: 24px
        position: relative
        white-space: nowrap

      .legend-item-box
        position: absolute
        left: 0
        top: 4px
        height: 1em
        width: 1em
        background: black

      .scale-line
        stroke: rgba(#000, 0.2)
        stroke-width: 0.5

      .scale-line-dashed
        stroke: rgba(#000, 0.3)

      text
        font-size: 14px

        &:not([fill])
          fill: currentColor

      svg
        overflow: visible

      .chart-notes
        font-size: 14px
        padding-top: 20px
        max-width: 840px

      .chart-source
        margin-top: 16px
        
        a
          transition-duration: 500ms

      .chart-value
        opacity: 0
        transition: opacity 300ms
        font-size: 13px
        pointer-events: none

        .chart:hover &:not(.hide)
          opacity: 1

      .tooltip
        position: absolute
        left: 0
        background: #fffe
        color: #235
        padding: .75em
        opacity: 0
        border-radius: .2em
        box-shadow: 0 0 5px 0 #0004
        transition-duration: 0.5s
        pointer-events: none
        font-size: 14px
        max-width: 180px
        box-sizing: border-box

      @media (max-width: 625px)
        .legend
          flex-wrap: wrap
          justify-content: flex-start
          max-width: 380px
          margin: auto
        .label text
          display: none
        .legend-item
          flex: 1 0 50%
          box-sizing: border-box
          margin: 0
          font-size: 12px
        .chart-content
          left: 4px
          right: 4px
        .bars rect
          transform: scaleY(1.3) translateY(-2px)
        .chart-notes
          display: none
          
      text
        font-size: 11px!important
        
        &.country-labels
          transform: translateY(-2px)
        
      .chart-content
        left: 20px
        right: 14px
        
