extend /partials/layout

block append config
  - var datapath = "static/charts/api/2022/snapshot/fig2-overall-2022/data"
  - var colorpath = "static/charts/templates/colors/data"
  - _.extend(page, data.getOne(datapath))
  - _.extend(page, data.getOne(colorpath))
  - toPercent = (n) => (n * 100).toFixed(2) + "%"
  - isEmpty = (y) => (y === undefined || y == null || y.length <= 0)
  - chart = page
  
block page
  .wrapper.flex
    .txt-center.flex.flex-grow.flex-col
      .chart-title= chart.title
      .chart-subtitle.txt-tu.p-sm!= chart.subtitle
      .chart.flex-grow: .chart-content
        - ln = chart.series[0].values.length
        - axes = chart.axes
        - minY = axes.minY
        - maxY = axes.maxY
        - range = maxY - minY
        - fx = (i) => (i + 0.6) / (ln + 0.25)
        - fy = (y) => (y - minY) / range
        
        svg(height="100%" width="100%")

          // Y-Axis labels
          svg(height="100%")
            - let steps = chart.axes.stepsY-1
            for n, i in new Array(steps+1)
              - y = 1 - (i / (steps))
              svg.y-label(y=toPercent(y))
                text(text-anchor="end" transform="translate(-8 4)")
                  = (minY + range*(i/steps) + (axes.percentage ? "%" : ""))
                
          // Y-Axis minor lines
          if chart.axes.minorLines
            svg(height="100%")
              for n, i in new Array(steps)
                - y = (i / steps)
                svg
                  line(
                    x1="0%"
                    y1=toPercent(y)
                    x2="100%"
                    y2=toPercent(y)
                    stroke="#5552"
                    stroke-dasharray=(chart.axes.dotted.includes(steps-i) ? 5 : "")
                  )
              line.tt-line(x1="5.33%" y1="0%" x2="5.33%" y2="100%" stroke="#5553" stroke-width="1" stroke-dasharray="5" style="opacity: 1;")
              line.tt-line(x1="14.22%" y1="0%" x2="14.22%" y2="100%" stroke="#5553" stroke-width="1" stroke-dasharray="5" style="opacity: 1;")
              line.tt-line(x1="23.11%" y1="0%" x2="23.11%" y2="100%" stroke="#5553" stroke-width="1" stroke-dasharray="5" style="opacity: 1;")
              line.tt-line(x1="32%" y1="0%" x2="32%" y2="100%" stroke="#5553" stroke-width="1" stroke-dasharray="5" style="opacity: 1;")
              line.tt-line(x1="40.89%" y1="0%" x2="40.89%" y2="100%" stroke="#5553" stroke-width="1" stroke-dasharray="5" style="opacity: 1;")
              line.tt-line(x1="49.78%" y1="0%" x2="49.78%" y2="100%" stroke="#5553" stroke-width="1" stroke-dasharray="5" style="opacity: 1;")
              line.tt-line(x1="58.67%" y1="0%" x2="58.67%" y2="100%" stroke="#5553" stroke-width="1" stroke-dasharray="5" style="opacity: 1;")
              line.tt-line(x1="67.56%" y1="0%" x2="67.56%" y2="100%" stroke="#5553" stroke-width="1" stroke-dasharray="5" style="opacity: 1;")
              line.tt-line(x1="76.44%" y1="0%" x2="76.44%" y2="100%" stroke="#5553" stroke-width="1" stroke-dasharray="5" style="opacity: 1;")
              line.tt-line(x1="85.33%" y1="0%" x2="85.33%" y2="100%" stroke="#5553" stroke-width="1" stroke-dasharray="5" style="opacity: 1;")
              line.tt-line(x1="94.22%" y1="0%" x2="94.22%" y2="100%" stroke="#5553" stroke-width="1" stroke-dasharray="5" style="opacity: 1;")
            

          // X-Axis labels
          for x, i in chart.series[0].values
            svg.x-label(x=toPercent(fx(i)) y="100%")
              text(
                text-anchor=axes.rotateX ? "end" : "middle"
                transform=axes.rotateX ? "rotate(-45) translate(-8, 24)" : "translate(0 20)"
              )=x
              
          // OPTIONAL GUIDE LINE
          if !isEmpty(axes.guideLine)
            - var y = 100*fy(maxY + minY - axes.guideLine)+"%"
            line(
              x1="0" y1=y x2="100" y2=y
              stroke="#333"
              stroke-width=.25
              stroke-dasharray=(false ? 1 : "")
            )

          // CHART LINES
          svg(
            height="100%"
            width="100%"
            viewBox="0 0 100 100"
            preserveAspectRatio="none"
            )

            // SERIES LINES
            //for item, i in chart.series
              if i
                polyline(
                  fill="none"
                  stroke=chart.colors[chart.series[i].color]
                  stroke-dasharray=(item.dashed ? 10 : "")
                  stroke-width=(item.widen ? 6 : 3)
                  stroke-linejoin=(item.dashed ? "": "round")
                  stroke-linecap=(item.dashed ? "": "round")
                  points=(item.values.map( (y, ix) => {
                    return isEmpty(y) ? "" : [
                      100 * fx(ix),
                      100 * fy(maxY + minY - y)
                    ].join(" ");
                  })).join(",")
                )

          g
            line.tt-line(x1="5.33%" y1="63.00%" x2="5.33%" y2="37.00%" stroke="#000" stroke-width="2" stroke-dasharray="0" style="opacity: 1;")
            line.tt-line(x1="14.22%" y1="69.00%" x2="14.22%" y2="31.00%" stroke="#000" stroke-width="2" stroke-dasharray="0" style="opacity: 1;")
            line.tt-line(x1="23.11%" y1="60.00%" x2="23.11%" y2="40.00%" stroke="#000" stroke-width="2" stroke-dasharray="0" style="opacity: 1;")
            line.tt-line(x1="32%" y1="71.00%" x2="32%" y2="29.00%" stroke="#000" stroke-width="2" stroke-dasharray="0" style="opacity: 1;")
            line.tt-line(x1="40.89%" y1="63.00%" x2="40.89%" y2="37.00%" stroke="#000" stroke-width="2" stroke-dasharray="0" style="opacity: 1;")
            line.tt-line(x1="49.78%" y1="66.00%" x2="49.78%" y2="34.00%" stroke="#000" stroke-width="2" stroke-dasharray="0" style="opacity: 1;")
            line.tt-line(x1="58.67%" y1="52.00%" x2="58.67%" y2="48.00%" stroke="#000" stroke-width="2" stroke-dasharray="0" style="opacity: 1;")
            line.tt-line(x1="67.56%" y1="49.00%" x2="67.56%" y2="51.00%" stroke="#000" stroke-width="2" stroke-dasharray="0" style="opacity: 1;")
            line.tt-line(x1="76.44%" y1="53.00%" x2="76.44%" y2="47.00%" stroke="#000" stroke-width="2" stroke-dasharray="0" style="opacity: 1;")
            line.tt-line(x1="85.33%" y1="53.00%" x2="85.33%" y2="47.00%" stroke="#000" stroke-width="2" stroke-dasharray="0" style="opacity: 1;")
            line.tt-line(x1="94.22%" y1="46.00%" x2="94.22%" y2="54.00%" stroke="#000" stroke-width="2" stroke-dasharray="0" style="opacity: 1;")

          for item, i in chart.series
            g.target
              for val, ix in item.values
                if i !== 0
                  circle(
                    r=8
                    cx=toPercent(fx(ix))
                    cy=toPercent(fy(maxY + minY - val))
                    stroke='#fff'
                    stroke-width=0
                  )
                svg.chart-value(
                  x=toPercent(fx(ix))
                  y=toPercent(fy(maxY + minY - val))
                  style=`color: ${chart.colors[chart.series[i].color]}`
                )
                  if i !== 0
                    text(
                      y=(5)
                      x=(24)
                      text-anchor="middle"
                      fill=chart.colors[chart.series[i].color]
                    )
                      = val
      
      .row
        ul.legend.list-bare.txt-left.flex.flex-ch
          for ax, i in new Array(chart.series.length)
            if i
              li.legend-item
                span.legend-item-box(style=`background: ${chart.colors[chart.series[i].color]}`)
                span.legend-item-label= chart.series[i].title

      .chart-source.txt-left.txt-muted!= chart.source
      //.chart-notes.txt-right.txt-muted.txt-cond!= chart.notes

      .tooltip

  script.


    /* --- USER TO UPDATE --- */
    const enableTooltips = true;
    const nLegendItems = 2;
    const nSeries = 3;
    /* --------------------- */
    
    const chart = document.querySelectorAll('.chart-content');
    const rects = document.querySelectorAll('rect');
    const vals = document.querySelectorAll('.chart-value');
    const series = document.querySelectorAll('.x-label');
    const tooltip = document.querySelector('.tooltip');
    const legendItems = document.querySelectorAll('.legend-item-label');
    
    if (enableTooltips) {
      window.addEventListener('DOMContentLoaded', () => {
        rects.forEach( (rect, i) => addHoverEventListeners(rect, i) );  
      });
    }
        
    function addHoverEventListeners(el, i) {
      el.addEventListener('mouseover', () => {
        
        let val = vals[i].innerHTML;
        let ser = series[ Math.floor(i/nLegendItems) ].innerHTML;
        let cat = legendItems[i % nLegendItems].innerHTML;
        let box = el.getBoundingClientRect();
        
        tooltip.innerHTML = val + " of " + ser + " countries were " + cat + " performing";
        tooltip.style.left = box.left + box.width/2 - tooltip.offsetWidth/2 + 'px';
        tooltip.style.top = box.top - tooltip.offsetHeight + 'px';
        tooltip.style.opacity = 1;
        
      });
      
      el.addEventListener('mouseleave', () => { 
        tooltip.style.opacity = 0;
      });
      
    }
  
block append css
  style
    :sass
    
      .wrapper
        height: 550px
        max-width: 1062px

      .chart
        box-sizing: border-box
        position: relative

      .chart-content
        position: absolute
        top: 20px
        left: 50px
        right: 20px
        bottom: 40px

      .chart-content > svg
        border-bottom: 1px solid #bbb

      .chart-title
        margin: auto
        font-size: 20px
        color: #002b45
        font-weight: 700
        
      .chart-subtitle
        font-weight: normal
        height: 10px
        margin-top: -10px
        font-size: 15px
        
      .tooltip
        position: absolute
        left: 0
        background: #fffe
        padding: .75em
        opacity: 0
        border-radius: .2em
        box-shadow: 0 0 5px 0 #0004
        transition-duration: 0.5s
        pointer-events: none
        font-size: 14px
        text-transform: lowercase
        max-width: 180px
        box-sizing: border-box

      li
        list-style: none
        margin: 0
        padding: 4px 16px 4px 24px

      .legend
        font-size: 15px
        margin-top: 2.5em

      .legend-item
        margin: 4px 8px 0
        padding-right: 0
        position: relative
        white-space: nowrap

      .legend-item-box
        position: absolute
        left: 0
        top: .5em
        height: 1em
        width: 1em
        background: black
        border-radius: 50%

      polyline
        vector-effect: non-scaling-stroke

      text
        font-size: 14px
        fill: currentColor

      svg
        overflow: visible
        
      .chart-notes, .chart-source
        margin: .5em 0 0 3em
        font-size: 15px
        
      .chart-value
        opacity: 1
        transition-duration: .4s
        pointer-events: auto
      
      /*.chart-content:hover .chart-value
      /*  opacity: 0

      .txt-muted
        color: #767676

      .y-label 
        display: none  
      .y-label:nth-child(odd)
        display: block

      g.target:nth-child(even) circle
        fill: #539ed4
      g.target:nth-child(odd) circle
        fill: #ff4050

      @media (max-width: 700px)
        
        text
          font-size: 13px
          
      @media (max-width: 450px)
        .chart-content
          bottom: 40px
        .legend
          flex-direction: column
        .chart-title
          font-size: 18px
        .chart-subtitle
          font-size: 14px
        .chart-notes,
        .chart-source
          text-align: center
          font-size: 13px
